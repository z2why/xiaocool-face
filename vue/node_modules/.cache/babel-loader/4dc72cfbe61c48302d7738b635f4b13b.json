{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { VEmojiPicker } from 'v-emoji-picker';\nexport default {\n  name: 'Chat',\n  components: {\n    VEmojiPicker\n  },\n  props: {\n    someData: {\n      type: Number,\n      default: \"\"\n    },\n    client: {\n      type: Object,\n      default: null\n    },\n    receiveMsg: {\n      type: String,\n      require: false,\n      default: ''\n    }\n  },\n\n  created() {\n    this.request.get(\"/message/getMsg/\" + {\n      meetingId: this.someData.meetingId\n    }).then(res => {\n      if (res.code === '200') {\n        this.$message.success(\"ok!\");\n      }\n    });\n  },\n\n  mounted() {\n    window.addEventListener('click', this.handleOutsideClick);\n  },\n\n  data() {\n    return {\n      visible: false,\n      recText: '',\n      sendText: '',\n      editor: null,\n      toolbarConfig: {},\n      editorConfig: {\n        placeholder: '请输入内容...'\n      },\n      mode: 'default' // or 'simple'\n\n    };\n  },\n\n  watch: {\n    receiveMsg() {\n      this.receiveMsgHandle();\n    }\n\n  },\n  methods: {\n    handleOutsideClick(event) {\n      // 获取组件的根元素\n      const container = this.$el; // 判断点击事件的目标是否在组件以外\n\n      if (!container.contains(event.target)) {\n        this.closePopover();\n      }\n    },\n\n    closePopover() {\n      this.visible = false;\n    },\n\n    togglePopover() {\n      this.visible = !this.visible;\n    },\n\n    noclosePopover() {\n      this.visible = true;\n    },\n\n    selectEmoji(emoji) {\n      console.log(emoji);\n      var elInput = document.getElementById('emojiInput'); //获取输入框元素\n      // console.log(elInput);\n\n      var start = elInput.selectionStart; // 记录光标开始的位置\n\n      var end = elInput.selectionEnd; // 记录选中的字符 最后的字符的位置\n\n      if (start === undefined || end === undefined) return;\n      var txt = elInput.value; // 将表情添加到选中的光标位置\n\n      var result = txt.substring(0, start) + emoji.data + txt.substring(end);\n      elInput.value = result; // 赋值给input的value\n      // 重置光标位置\n\n      elInput.focus();\n      elInput.selectionStart = start + emoji.data.length;\n      elInput.selectionEnd = start + emoji.data.length;\n      console.log(result);\n      this.sendText = result; // 赋值(注意这里一定要赋值给表情输入框绑定的那个值)\n    },\n\n    receiveMsgHandle() {\n      this.recText += this.receiveMsg;\n    },\n\n    enterSearch() {\n      document.onkeydown = e => {\n        //13表⽰回车键，baseURI是当前页⾯的地址，为了更严谨，也可以加别的，可以打印e看⼀下\n        //回车后执⾏搜索⽅法\n        this.$emit('chatEvent', this.sendText);\n      };\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AAEA;EACAA,YADA;EAEAC;IACAC;EADA,CAFA;EAKAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IASAE;MACAH,YADA;MAEAI,cAFA;MAGAH;IAHA;EATA,CALA;;EAoBAI;IACA;MAAAC;IAAA;MACA;QACA;MACA;IAEA,CALA;EAQA,CA7BA;;EAiCAC;IACAC;EACA,CAnCA;;EAoCAC;IACA;MACAC,cADA;MAEAC,WAFA;MAGAC,YAHA;MAIAC,YAJA;MAKAC,iBALA;MAMAC;QAAAC;MAAA,CANA;MAOAC,eAPA,CAOA;;IAPA;EASA,CA9CA;;EA+CAC;IACAf;MACA;IACA;;EAHA,CA/CA;EAqDAgB;IACAC;MACA;MACA,2BAFA,CAIA;;MACA;QACA;MACA;IACA,CATA;;IAUAC;MACA;IACA,CAZA;;IAaAC;MACA;IACA,CAfA;;IAgBAC;MACA;IACA,CAlBA;;IAmBAC;MACAC;MACA,oDAFA,CAEA;MACA;;MACA,mCAJA,CAIA;;MACA,+BALA,CAKA;;MACA;MACA,wBAPA,CAQA;;MACA,aACAC,yDADA;MAEAC,uBAXA,CAWA;MACA;;MACAA;MACAA;MACAA;MACAF;MACA,uBAjBA,CAiBA;IAEA,CAtCA;;IAuCAG;MACA;IACA,CAzCA;;IA0CAC;MACAC;QACA;QACA;QAEA;MAEA,CANA;IAOA;;EAlDA;AArDA","names":["name","components","VEmojiPicker","props","someData","type","default","client","receiveMsg","require","created","meetingId","mounted","window","data","visible","recText","sendText","editor","toolbarConfig","editorConfig","placeholder","mode","watch","methods","handleOutsideClick","closePopover","togglePopover","noclosePopover","selectEmoji","console","txt","elInput","receiveMsgHandle","enterSearch","document"],"sourceRoot":"src/views/meeting/components","sources":["Chat.vue"],"sourcesContent":["<template>\n  <div class=\"Chat-container\" @click=\"closePopover\">\n    <el-input v-model=\"recText\"  :rows=\"18.5\"  type=\"textarea\" style=\"font-size: large;user-select: none;-webkit-user-select: auto\" readonly placeholder=\"还没有人聊天...\" />\n    <el-popover\n        ref=\"popverRef\"\n        trigger=\"click\"\n        v-model=\"visible\"\n    >\n      <!-- 触发事件 -->\n\n      <!-- 弹框内容 -->\n      <div class=\"div_content\" style=\"position: absolute;bottom: 1px\" @click.stop=\"noclosePopover\">\n        <VEmojiPicker @select=\"selectEmoji\" />\n      </div>\n    </el-popover>\n<!--    <el-button   slot=\"prepend\" type=\"text\" size=\"mini\"  @click=\"visible = !visible\">😊</el-button>-->\n    <el-input  id=\"emojiInput\" v-model=\"sendText\" placeholder=\"请输入内容\" maxlength=\"64\"  class=\"input-with-select\"  @keyup.enter.native=\"$emit('chatEvent',sendText);sendText=''\">\n      <el-button slot=\"prepend\" size=\"mini\"  @click.stop=\"togglePopover\">😊</el-button>\n      <el-button slot=\"append\" size=\"mini\" icon=\"el-icon-s-promotion\"\n                 @click=\"$emit('chatEvent',sendText);sendText=''\"  />\n    </el-input>\n\n\n  </div>\n</template>\n\n<script>\n\n\nimport { VEmojiPicker } from 'v-emoji-picker';\n\nexport default {\n  name: 'Chat',\n  components: {\n    VEmojiPicker\n  },\n  props: {\n    someData: {\n      type: Number,\n      default: \"\",\n    },\n    client: {\n      type: Object,\n      default: null\n    },\n    receiveMsg: {\n      type: String,\n      require: false,\n      default: ''\n    }\n  },\ncreated(){\n        this.request.get(\"/message/getMsg/\"+{meetingId:this.someData.meetingId}).then(res => {\n        if (res.code === '200') {\n          this.$message.success(\"ok!\")\n        }\n\n  })\n\n\n},\n\n\n\n  mounted() {\n    window.addEventListener('click', this.handleOutsideClick);\n  },\n  data() {\n    return {\n      visible: false,\n      recText: '',\n      sendText: '',\n      editor: null,\n      toolbarConfig: { },\n      editorConfig: { placeholder: '请输入内容...' },\n      mode: 'default', // or 'simple'\n    }\n  },\n  watch: {\n    receiveMsg() {\n      this.receiveMsgHandle()\n    }\n  },\n\n  methods: {\n    handleOutsideClick(event) {\n      // 获取组件的根元素\n      const container = this.$el;\n\n      // 判断点击事件的目标是否在组件以外\n      if (!container.contains(event.target)) {\n        this.closePopover();\n      }\n    },\n    closePopover() {\n      this.visible = false;\n    },\n    togglePopover() {\n      this.visible = !this.visible;\n    },\n    noclosePopover() {\n      this.visible = true;\n    },\n    selectEmoji(emoji) {\n      console.log(emoji)\n      var elInput = document.getElementById('emojiInput')//获取输入框元素\n      // console.log(elInput);\n      var start = elInput.selectionStart // 记录光标开始的位置\n      var end = elInput.selectionEnd // 记录选中的字符 最后的字符的位置\n      if (start === undefined || end === undefined) return\n      var txt = elInput.value\n      // 将表情添加到选中的光标位置\n      var result =\n          txt.substring(0, start) + emoji.data + txt.substring(end)\n      elInput.value = result // 赋值给input的value\n      // 重置光标位置\n      elInput.focus()\n      elInput.selectionStart = start + emoji.data.length\n      elInput.selectionEnd = start + emoji.data.length\n      console.log(result)\n      this.sendText= result // 赋值(注意这里一定要赋值给表情输入框绑定的那个值)\n\n    },\n    receiveMsgHandle() {\n      this.recText += this.receiveMsg\n    },\n    enterSearch(){\n      document.onkeydown = e =>{\n        //13表⽰回车键，baseURI是当前页⾯的地址，为了更严谨，也可以加别的，可以打印e看⼀下\n          //回车后执⾏搜索⽅法\n\n          this.$emit('chatEvent', this.sendText)\n\n      }\n    },\n\n\n  }\n}\n</script>\n\n\n\n<style lang=\"scss\" scoped>\n::v-deep .el-popover{\n  padding: 0;\n\n}\ntextarea{\n\n  -webkit-user-select:auto; /*webkit浏览器*/\n\n}\n\n</style>\n"]},"metadata":{},"sourceType":"module"}