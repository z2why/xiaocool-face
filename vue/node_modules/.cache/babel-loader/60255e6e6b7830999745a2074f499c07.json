{"ast":null,"code":"import _defineProperty from \"C:/Users/86134/Desktop/\\u7231\\u8BFB\\u4E66/springboot-vue/vue/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"C:/Users/86134/Desktop/\\u7231\\u8BFB\\u4E66/springboot-vue/vue/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/86134/Desktop/\\u7231\\u8BFB\\u4E66/springboot-vue/vue/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n\nvar _methods;\n\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar socket; // 集成TRTC Web SDK，相关操作请参考：https://cloud.tencent.com/document/product/647/16863\n\nimport TRTC from \"trtc-js-sdk\"; // 用于获取userSig的方法，这里我将生成方式封装成一个方法，文章最后会给出代码和连接，\n// 相关操作请参考：UserSig相关问题 https://cloud.tencent.com/document/product/647/17275\n\nimport { genTestUserSig } from \"../utils/GenerateTestUserSig.js\";\nexport default {\n  data: function data() {\n    return {\n      circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      localStream: null,\n      l1: '',\n      users: [],\n      roomId: this.meetingId,\n      userId: '',\n      userin: 1,\n      isCollapse: false,\n      chatUser: '',\n      meetingName: '',\n      meetingId: '',\n      text: \"\",\n      dialogVisible: false,\n      messages: [],\n      content: '',\n      isVedio: true,\n      // 当前是否打开摄像头\n      isAudio: true,\n      // 当前是否打开麦克风\n      remoteStream: [],\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      sdkAppId: 1400702367 // 请填自己的sdkAppId，\n      // 了解更多请参考：https://cloud.tencent.com/document/product/647/32398\n\n    };\n  },\n  created: function created() {\n    this.init();\n    this.meetingId = this.$route.params.meetingId;\n    this.meetingName = this.$route.params.meetingName;\n    this.joinroom();\n    console.log(this.meetingName);\n  },\n  mounted: function mounted() {},\n  methods: (_methods = {\n    // 加入房间\n    joinroom: function joinroom() {\n      var _this2 = this;\n\n      // if (this.roomId == \"\" || this.userId == \"\" || this.localStream != null) {\n      //   console.log(\"表单不能为空\");\n      // } else {\n      // 判断加入参数填写完全后执行一下代码\n      this.userin = 1;\n      var sdkAppId = this.sdkAppId;\n      var userId = this.user.username;\n      var roomId = this.meetingId;\n      var client = this.client;\n      var localStream = this.localStream;\n      var userSig = genTestUserSig(userId).userSig; // 获取userSig\n\n      var clientConfig = {\n        mode: \"rtc\",\n        // 会话模式为rtc实时音视频通话模式\n        sdkAppId: sdkAppId,\n        userId: userId,\n        userSig: userSig\n      };\n      client = TRTC.createClient(clientConfig); // 创建一个用户对象\n\n      this.client = client; // 添加监听回调函数，当远端流加入时调用\n\n      client.on(\"stream-added\", function (event) {\n        // 判断此远端流用户是否是反复加入的用户\n        var index = _this2.isremoteStream(event.stream.getUserId());\n\n        _this2.l1 = event.stream.getUserId();\n\n        if (index != -1) {\n          // 对反复加入聊天的用户，将原来该用户的视频流替换为新的视频流\n          _this2.unsubscribe[index].stop();\n\n          client.unsubscribe(_this2.remoteStream[index]);\n          _this2.remoteStream[index] = event.stream;\n          client.subscribe(_this2.remoteStream[index]);\n          event.stream.play(event.stream.getUserId());\n        } else {\n          _this2.remoteStream.push(event.stream);\n\n          client.subscribe(event.stream);\n\n          _this2.$nextTick(function () {\n            // 列表渲染完成后将新加的远端流进行播放\n            event.stream.play(event.stream.getUserId());\n          });\n        }\n      }); // 监听远端流退出的处理函数，将其从远端流数组中删除\n\n      client.on(\"stream-removed\", function (event) {\n        var index = _this2.isremoteStream(event.stream.getUserId());\n\n        _this2.remoteStream[index].stop();\n\n        _this2.remoteStream.splice(index, 1);\n      }); // 加入房间\n\n      client.join({\n        roomId: parseInt(roomId)\n      }).then(function () {\n        var streamConfig = {\n          userId: userId,\n          video: true,\n          audio: true\n        };\n        localStream = TRTC.createStream(streamConfig); // 创建一个本地流\n\n        localStream.initialize().then(function () {\n          // 初始化本地流\n          client.publish(localStream); // 初始化完成后进行推流操作\n\n          localStream.play(\"mine\", {\n            // 本机播放自己的本地流\n            objectFit: \"cover\",\n            muted: true\n          });\n          _this2.localStream = localStream;\n          _this2.client = client;\n        });\n      }); // }\n    },\n    // 关闭/打开摄像头\n    muteLocalVideo: function muteLocalVideo() {\n      if (this.isVedio) {\n        this.isVedio = false;\n        this.localStream.muteVideo();\n      } else {\n        this.isVedio = true;\n        this.localStream.unmuteVideo();\n      }\n    },\n    // 关闭/打开麦克风\n    muteLocalAudio: function muteLocalAudio() {\n      if (this.isAudio) {\n        this.isAudio = false;\n        this.localStream.muteAudio();\n      } else {\n        this.isAudio = true;\n        this.localStream.unmuteAudio();\n      }\n    },\n    // 断开房间\n    leaveroom: function leaveroom() {\n      var _this3 = this;\n\n      this.userin = 0;\n      this.client.unpublish(this.localStream).then(function () {\n        // 先断开推流，然后完成后续操作\n        // 断开后远端的订阅会自动断开不需要手动调用unsubscribe方法，同时远端会触发stream-removed的监听回调\n        _this3.client.leave(); // 离开房间，注意本地端也会触发stream-removed的监听回调\n\n\n        _this3.localStream.stop(); // 停止本地的播放\n\n\n        _this3.localStream.close(); // 关闭本地流，关闭音频和视频的采集\n\n\n        _this3.localStream = null; // 初始状态\n      });\n    },\n    // 根据id获取uid\n    getUidByStreamId: function getUidByStreamId(streamId) {\n      var _iterator = _createForOfIteratorHelper(this.members_),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              userId = _step$value[0],\n              stream = _step$value[1];\n\n          if (stream.getUserId() === streamId) {\n            return userId;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    // 远端监听\n    updateStream: function updateStream() {\n      var _this4 = this;\n\n      this.client.on('stream-removed', function (event) {\n        var remoteStream = event.stream;\n        $(\"\".concat('#mask_' + remoteStream.getId())).hide();\n        $(\"\".concat('#status_' + remoteStream.getId())).show();\n      }); // 关闭摄像头\n\n      this.client.on('mute-video', function (evt) {\n        var streamId = _this4.getUidByStreamId(evt.userId);\n\n        if (streamId) {\n          $('#mask_' + streamId).show();\n        }\n      }); // 打开摄像头\n\n      this.client.on('unmute-video', function (evt) {\n        var streamId = _this4.getUidByStreamId(evt.userId);\n\n        if (streamId) {\n          $('#mask_' + streamId).hide();\n        }\n      }); // 关闭语音\n\n      this.client.on('mute-audio', function (evt) {\n        var streamId = _this4.getUidByStreamId(evt.userId);\n\n        $(\"\".concat('#user_' + streamId)).find('#audio_' + streamId).hide().next().show();\n      }); // 打开语音\n\n      this.client.on('unmute-audio', function (evt) {\n        var streamId = _this4.getUidByStreamId(evt.userId);\n\n        $(\"\".concat('#user_' + streamId)).find('#unaudio_' + streamId).hide().prev().show();\n      });\n    },\n    // 判断是否是已加入的远端流，这里我直接使用流的userId进行判断，可以更具需要自行设计，也可配合后端进行判断\n    // 没有在房间返回-1，有则返回远端流在数组中的下标\n    isremoteStream: function isremoteStream(userId) {\n      var remoteStream = this.remoteStream;\n\n      for (var i = 0; i < remoteStream.length; i++) {\n        if (remoteStream[i].getUserId() == userId) return i;\n      }\n\n      return -1;\n    },\n    init: function init() {\n      var username = this.user.username;\n\n      var _this = this;\n\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        var socketUrl = \"ws://localhost:9091/imserver/\" + username;\n\n        if (socket != null) {\n          socket.close();\n          socket = null;\n        } // 开启一个websocket服务\n\n\n        socket = new WebSocket(socketUrl); //打开事件\n\n        socket.onopen = function () {\n          console.log(\"websocket已打开\");\n        }; //  浏览器端收消息，获得从服务端发送过来的文本消息\n\n\n        socket.onmessage = function (msg) {\n          console.log(\"收到数据====\" + msg.data);\n          var data = JSON.parse(msg.data); // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\n\n          if (data.users) {\n            // 获取在线人员信息\n            _this.users = data.users.filter(function (user) {\n              return user.username;\n            }); // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\n          } else {\n            // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\n            //  // {\"from\": \"zhang\", \"text\": \"hello\"}\n            if (data.from === _this.chatUser) {\n              _this.messages.push(data); // 构建消息内容\n\n\n              _this.createContent(data.from, null, data.text);\n            }\n          }\n        };\n      }\n    },\n    send: function send() {\n      if (!this.chatUser) {\n        this.$message({\n          type: 'warning',\n          message: \"请选择聊天对象\"\n        });\n        return;\n      }\n\n      if (!this.text) {\n        this.$message({\n          type: 'warning',\n          message: \"请输入内容\"\n        });\n      } else {\n        if (typeof WebSocket == \"undefined\") {\n          console.log(\"您的浏览器不支持WebSocket\");\n        } else {\n          console.log(\"您的浏览器支持WebSocket\"); // 组装待发送的消息 json\n          // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n\n          var message = {\n            from: this.user.username,\n            to: this.chatUser,\n            text: this.text\n          };\n          socket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，由服务端进行转发\n\n          this.messages.push({\n            user: this.user.username,\n            text: this.text\n          }); // 构建消息内容，本人消息\n\n          this.createContent(null, this.user.username, this.text);\n          this.text = '';\n        }\n      }\n    },\n    createContent: function createContent(remoteUser, nowUser, text) {\n      // 这个方法是用来将 json的聊天消息数据转换成 html的。\n      var html; // 当前用户消息\n\n      if (nowUser) {\n        // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" + \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" + \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" + \"  </div>\\n\" + \"  <div class=\\\"el-col el-col-2\\\">\\n\" + \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" + \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" + \"  </span>\\n\" + \"  </div>\\n\" + \"</div>\";\n      } else if (remoteUser) {\n        // remoteUser表示远程用户聊天消息，蓝色的气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" + \"  <div class=\\\"el-col el-col-2\\\" style=\\\"text-align: right\\\">\\n\" + \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" + \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" + \"  </span>\\n\" + \"  </div>\\n\" + \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" + \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" + \"  </div>\\n\" + \"</div>\";\n      }\n\n      console.log(html);\n      this.content += html;\n    }\n  }, _defineProperty(_methods, \"send\", function send() {\n    if (!this.chatUser) {\n      this.$message({\n        type: 'warning',\n        message: \"请选择聊天对象\"\n      });\n      return;\n    }\n\n    if (!this.text) {\n      this.$message({\n        type: 'warning',\n        message: \"请输入内容\"\n      });\n    } else {\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\"); // 组装待发送的消息 json\n        // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n\n        var message = {\n          from: this.user.username,\n          to: this.chatUser,\n          text: this.text\n        };\n        socket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，由服务端进行转发\n\n        this.messages.push({\n          user: this.user.username,\n          text: this.text\n        }); // 构建消息内容，本人消息\n\n        this.createContent(null, this.user.username, this.text);\n        this.text = '';\n      }\n    }\n  }), _defineProperty(_methods, \"createContent\", function createContent(remoteUser, nowUser, text) {\n    // 这个方法是用来将 json的聊天消息数据转换成 html的。\n    var html; // 当前用户消息\n\n    if (nowUser) {\n      // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n      html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" + \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" + \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" + \"  </div>\\n\" + \"  <div class=\\\"el-col el-col-2\\\">\\n\" + \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" + \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" + \"  </span>\\n\" + \"  </div>\\n\" + \"</div>\";\n    } else if (remoteUser) {\n      // remoteUser表示远程用户聊天消息，蓝色的气泡\n      html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" + \"  <div class=\\\"el-col el-col-2\\\" style=\\\"text-align: right\\\">\\n\" + \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" + \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" + \"  </span>\\n\" + \"  </div>\\n\" + \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" + \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" + \"  </div>\\n\" + \"</div>\";\n    }\n\n    console.log(html);\n    this.content += html;\n  }), _methods)\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA,W,CACA;;AACA,+B,CACA;AACA;;AACA;AAEA;EACAA,IADA,kBACA;IACA;MACAC,gFADA;MAEAC,iBAFA;MAGAC,MAHA;MAIAC,SAJA;MAKAC,sBALA;MAMAC,UANA;MAOAC,SAPA;MAQAC,iBARA;MASAC,YATA;MAUAC,eAVA;MAWAC,aAXA;MAYAC,QAZA;MAaAC,oBAbA;MAcAC,YAdA;MAeAC,WAfA;MAgBAC,aAhBA;MAgBA;MACAC,aAjBA;MAiBA;MACAC,gBAlBA;MAmBAC,kFAnBA;MAoBAC,oBApBA,CAoBA;MACA;;IArBA;EAuBA,CAzBA;EA0BAC,OA1BA,qBA0BA;IACA;IACA;IACA;IACA;IACAC;EACA,CAhCA;EAiCAC,OAjCA,qBAiCA,CAEA,CAnCA;EAoCAC;IACA;IACAC,QAFA,sBAEA;MAAA;;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,6CAXA,CAWA;;MACA;QACAC,WADA;QACA;QACAN,kBAFA;QAGAd,cAHA;QAIAqB;MAJA;MAMAC,yCAlBA,CAkBA;;MACA,qBAnBA,CAoBA;;MACAA;QACA;QACA;;QACA;;QACA;UACA;UACA;;UACAA;UAEA;UAEAA;UACAC;QACA,CATA,MASA;UACA;;UACAD;;UACA;YACA;YACAC;UACA,CAHA;QAIA;MACA,CArBA,EArBA,CA4CA;;MACAD;QACA;;QACA;;QACA;MACA,CAJA,EA7CA,CAmDA;;MACAA;QAAAvB;MAAA;QACA;UACAC,cADA;UAEAwB,WAFA;UAGAC;QAHA;QAMA7B,8CAPA,CAOA;;QACAA;UACA;UAEA0B,4BAHA,CAGA;;UACA1B;YACA;YACA8B,kBAFA;YAGAC;UAHA;UAKA;UACA;QACA,CAXA;MAYA,CApBA,EApDA,CAyEA;IACA,CA5EA;IA6EA;IACAC,cA9EA,4BA8EA;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA;QACA;MACA;IACA,CAtFA;IAuFA;IACAC,cAxFA,4BAwFA;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA;QACA;MACA;IACA,CAhGA;IAiGA;IACAC,SAlGA,uBAkGA;MAAA;;MACA;MACA;QACA;QACA;QAEA,sBAJA,CAIA;;;QACA,0BALA,CAKA;;;QACA,2BANA,CAMA;;;QACA,0BAPA,CAOA;MACA,CARA;IASA,CA7GA;IAgHA;IACAC,gBAjHA,4BAiHAC,QAjHA,EAiHA;MAAA,2CACA,aADA;MAAA;;MAAA;QACA;UAAA;UAAA;UAAA;;UACA;YACA;UACA;QACA;MALA;QAAA;MAAA;QAAA;MAAA;IAMA,CAvHA;IAwHA;IACAC,YAzHA,0BAyHA;MAAA;;MACA;QACA;QACAC;QACAA;MACA,CAJA,EADA,CAMA;;MACA;QACA;;QACA;UACAA;QACA;MACA,CALA,EAPA,CAaA;;MACA;QACA;;QACA;UACAA;QACA;MACA,CALA,EAdA,CAoBA;;MACA;QACA;;QACAA;MACA,CAHA,EArBA,CAyBA;;MACA;QACA;;QACAA;MACA,CAHA;IAIA,CAvJA;IA0JA;IACA;IACAC,cA5JA,0BA4JAnC,MA5JA,EA4JA;MACA;;MACA;QACA;MACA;;MACA;IACA,CAlKA;IAmKAoC,IAnKA,kBAmKA;MAEA;;MACA;;MACA;QACApB;MACA,CAFA,MAEA;QACAA;QACA;;QACA;UACAqB;UACAA;QACA,CANA,CAOA;;;QACAA,kCARA,CASA;;QACAA;UACArB;QACA,CAFA,CAVA,CAaA;;;QACAqB;UACArB;UACA,gCAFA,CAEA;;UACA;YAAA;YACAsB;cAAA;YAAA,GADA,CACA;UACA,CAFA,MAEA;YACA;YACA;YACA;cACAA,0BADA,CAEA;;;cACAA;YACA;UACA;QACA,CAdA;MAeA;IACA,CAvMA;IAwMAC,IAxMA,kBAwMA;MACA;QACA;UAAAC;UAAAC;QAAA;QACA;MACA;;MACA;QACA;UAAAD;UAAAC;QAAA;MACA,CAFA,MAEA;QACA;UACAzB;QACA,CAFA,MAEA;UACAA,gCADA,CAEA;UACA;;UACA;YAAA0B;YAAAC;YAAArC;UAAA;UACA+B,qCALA,CAKA;;UACA;YAAAxB;YAAAP;UAAA,GANA,CAOA;;UACA;UACA;QACA;MACA;IACA,CA9NA;IA+NAsC,aA/NA,yBA+NAC,UA/NA,EA+NAC,OA/NA,EA+NAxC,IA/NA,EA+NA;MAAA;MACA,SADA,CAEA;;MACA;QAAA;QACAyC,6DACA,uFADA,GAEA,8BAFA,GAEAzC,IAFA,GAEA,UAFA,GAGA,YAHA,GAIA,qCAJA,GAKA,0GALA,GAMA,sHANA,GAOA,aAPA,GAQA,YARA,GASA,QATA;MAUA,CAXA,MAWA;QAAA;QACAyC,6DACA,iEADA,GAEA,0GAFA,GAGA,sHAHA,GAIA,aAJA,GAKA,YALA,GAMA,qFANA,GAOA,+BAPA,GAOAzC,IAPA,GAOA,UAPA,GAQA,YARA,GASA,QATA;MAUA;;MACAU;MACA;IACA;EA3PA,qDA4PA;IACA;MACA;QAAAwB;QAAAC;MAAA;MACA;IACA;;IACA;MACA;QAAAD;QAAAC;MAAA;IACA,CAFA,MAEA;MACA;QACAzB;MACA,CAFA,MAEA;QACAA,gCADA,CAEA;QACA;;QACA;UAAA0B;UAAAC;UAAArC;QAAA;QACA+B,qCALA,CAKA;;QACA;UAAAxB;UAAAP;QAAA,GANA,CAOA;;QACA;QACA;MACA;IACA;EACA,CAlRA,qEAmRAuC,UAnRA,EAmRAC,OAnRA,EAmRAxC,IAnRA,EAmRA;IAAA;IACA,SADA,CAEA;;IACA;MAAA;MACAyC,6DACA,uFADA,GAEA,8BAFA,GAEAzC,IAFA,GAEA,UAFA,GAGA,YAHA,GAIA,qCAJA,GAKA,0GALA,GAMA,sHANA,GAOA,aAPA,GAQA,YARA,GASA,QATA;IAUA,CAXA,MAWA;MAAA;MACAyC,6DACA,iEADA,GAEA,0GAFA,GAGA,sHAHA,GAIA,aAJA,GAKA,YALA,GAMA,qFANA,GAOA,+BAPA,GAOAzC,IAPA,GAOA,UAPA,GAQA,YARA,GASA,QATA;IAUA;;IACAU;IACA;EACA,CA/SA;AApCA","names":["data","circleUrl","localStream","l1","users","roomId","userId","userin","isCollapse","chatUser","meetingName","meetingId","text","dialogVisible","messages","content","isVedio","isAudio","remoteStream","user","sdkAppId","created","console","mounted","methods","joinroom","mode","userSig","client","event","video","audio","objectFit","muted","muteLocalVideo","muteLocalAudio","leaveroom","getUidByStreamId","streamId","updateStream","$","isremoteStream","init","socket","_this","send","type","message","from","to","createContent","remoteUser","nowUser","html"],"sourceRoot":"src/views","sources":["join.vue"],"sourcesContent":["<template>\n\n  <div class=\"win\">\n\n\n<!--聊天模块-->\n\n    <el-card style=\"background: whitesmoke;width: 300px; height: 870px; color: #333\">\n      <div style=\"padding-bottom: 10px; border-bottom: 1px solid #ccc\"><i class=\"el-icon-user-solid\" style=\"padding-right: 10px\"></i>在线用户<span style=\"font-size: 12px;\"></span></div>\n      <div style=\"padding: 10px 0\" v-for=\"user in users\" :key=\"user.username\">\n        <span>{{ user.username }}</span>\n        <i class=\"el-icon-chat-dot-round\" style=\"margin-left: 10px; font-size: 16px; cursor: pointer\"\n           @click=\"dialogVisible=true;chatUser=user.username\"></i>\n        <span style=\"font-size: 12px;color: limegreen; margin-left: 5px\" v-if=\"user.username === chatUser\">chatting...</span>\n      </div>\n    </el-card>\n\n\n    <div class=\"DIA\">\n      <el-dialog\n          :modal=\"false\"\n          width=\"800px\"\n          :visible.sync=\"dialogVisible\" >\n        <div style=\"width: 800px; margin: 0 auto; background-color: white;\n                    border-radius: 5px; box-shadow: 0 0 10px #ccc\">\n          <div style=\"text-align: center; line-height: 50px;\">\n            聊天小窗口（{{ chatUser }}）<i class=\"el-icon-chat-round\"></i>\n          </div>\n          <div style=\"height: 350px; overflow:auto; border-top: 1px solid #ccc\" v-html=\"content\"></div>\n          <div style=\"height: 200px\">\n            <textarea v-model=\"text\" style=\"height: 160px; width: 100%; padding: 20px; border: none; border-top: 1px solid #ccc;\n             border-bottom: 1px solid #ccc; outline: none\"></textarea>\n            <div style=\"text-align: right; padding-right: 10px\">\n              <el-button type=\"primary\" size=\"mini\" @click=\"send\">发送</el-button>\n            </div>\n          </div>\n        </div>\n      </el-dialog>\n    </div>\n\n<!--直播模块-->\n    <el-card  style=\"padding: 0px;width: 1224px;height: 870px;order-left-width: 4px;margin-left: 1px; background: whitesmoke;\">\n      <div style=\"height: 80px\">\n        <h1>{{ this.meetingName }}</h1>\n        <el-divider></el-divider>\n      </div>\n<!--     收集一些参数，roomId：房间号，userId：用户名称-->\n    <div class=\"form\">\n    <div STYLE=\"position: relative;bottom: 27px;left: 13%;\"> <button class=\"btn1\" @click=\"joinroom\" style=\"background: #E3E3E3;border-radius: 10px;width: 90PX;height: 50px;border: none;\"><img class=\"img\"   style=\"width: 49px;\" src=\"../../src/imgs/02视频@2x.png\" alt=\"视频\"/></button><span STYLE=\"position: relative; left: -76px;top: 33px; font-size: initial;\">开启视频</span></div>\n    <div STYLE=\"position: relative;bottom: 77px;left: 25%;\"> <button class=\"btn2\" @click=\"leaveroom\" style=\"background: #f93030d9;border-radius: 10px;width: 90PX;height: 50px;border: none;\"><img class=\"img\" style=\"width: 49px;\" src=\"../../src/imgs/04挂断@2x.png\" alt=\"挂断\"/></button><span STYLE=\"position: relative; left: -75px;top: 35px; font-size: initial;\">离开会议</span></div>\n    </div>\n    <div class=\"content\">\n      <div class=\"left\">\n        <div id=\"warp\" class=\"userlist\">\n    <!-- 用于播放自己的本地流 -->\n          <DIV style=\"position: absolute;top: 133px; left: 613px\">\n            <el-avatar>{{this.user.username}}</el-avatar> <div class=\"trtc-div\" id=\"mine\" v-if=\"userin===1\" ></div></DIV>\n           <div STYLE=\"      height: 300px;width: 360px;background: #58575b;position: relative; top: -34px; left: -10px;}\"  v-if=\"userin===0\"></div>\n            </div>\n          </div>\n    <!-- 远端流列表 -->\n   <DIV  style=\"  position: relative; right: -358px; top: -110px;\">\n     <div\n\n        v-for=\"item in remoteStream\"\n        :key=\"item.getUserId()\"\n        :id=\"item.getUserId()\"\n        v-on:load=\"remoteStreamPlay()\"\n        class=\"trtc-div1\">\n       <el-avatar>{{l1}}</el-avatar>  </div>\n  </div>\n      </DIV>\n\n      <!--右边视频盒子-->\n\n\n\n    </el-card>\n  </div>\n\n\n</template>\n<style scoped lang=\"less\">\nh1{\n\n  font-weight: 400;\n  height: 40px;\n  line-height: 40px;\n  font-size: 26px;\n  text-align: center;\n}\n.win {\n\n  height: 99%;\n  border-radius: 15px;\n  box-sizing: border-box;\n  padding:15px ;\n  margin: 0;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-content: flex-start;\n}\n\n.el-avatar {\n  display: inline-block;\n  box-sizing: border-box;\n  text-align: center;\n  overflow: hidden;\n  color: #fff;\n  background: #66b1ff;\n  width: 70px;\n  height: 70px;\n  line-height: 70px;\n  position: relative;\n  top: 298px;\n  z-index: 1;\n  left: 280px;\n  FONT-SIZE: unset;\n  FONT-WEIGHT: 600;\n}\n\n.left{\n background-color: #ffffff00;\n}\n.form {\n  position: relative;\n  height: 30px;\n  left: 292px;\n  bottom: -706px;\n}\n.trtc-div {\n  height: 300px;\n  width: 360px;\n  }\n.trtc-div1 {\n  height: 300px;\n  width: 360px;\n}\n::v-deep .el-dialog__header {\n  display: none;\n}\n::v-deep  .el-dialog .el-dialog__body{\n  padding: 0;\n}\n.tip {\n  color: white;\n  text-align: center;\n  border-radius: 10px;\n  font-family: sans-serif;\n  padding: 10px;\n  width:auto;\n  display:inline-block !important;\n  display:inline;\n}\n\n.left1 {\n  background-color: forestgreen;\n}\n*{\n  font-family: 微软雅黑;\n}\n.btn1:hover {\n  color: #000000;\n  -webkit-transform: translateY(-1px);\n  transform: translateY(1px);\n  box-shadow: 0 7px 14px rgb(50 50 93 / 10%), 0 3px 6px rgb(0 0 0 / 8%);\n}\n.btn2:hover {\n  color: #000000;\n  -webkit-transform: translateY(-1px);\n  transform: translateY(1px);\n  box-shadow: 0 7px 14px rgb(50 50 93 / 10%), 0 3px 6px rgb(0 0 0 / 8%);\n}\n</style>\n<script>\nlet socket;\n// 集成TRTC Web SDK，相关操作请参考：https://cloud.tencent.com/document/product/647/16863\nimport TRTC from \"trtc-js-sdk\";\n// 用于获取userSig的方法，这里我将生成方式封装成一个方法，文章最后会给出代码和连接，\n// 相关操作请参考：UserSig相关问题 https://cloud.tencent.com/document/product/647/17275\nimport {genTestUserSig} from \"../utils/GenerateTestUserSig.js\"\n\nexport default {\n  data() {\n    return {\n      circleUrl: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png',\n      localStream: null,\n      l1:'',\n      users:[],\n      roomId: this.meetingId,\n      userId: '',\n      userin:1,\n      isCollapse: false,\n      chatUser: '',\n      meetingName:'',\n      meetingId:'',\n      text: \"\",\n      dialogVisible:false,\n      messages: [],\n      content: '',\n      isVedio: true, // 当前是否打开摄像头\n      isAudio: true, // 当前是否打开麦克风\n      remoteStream: [],\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      sdkAppId: 1400702367 // 请填自己的sdkAppId，\n      // 了解更多请参考：https://cloud.tencent.com/document/product/647/32398\n    };\n  },\n  created() {\n    this.init()\n    this.meetingId=this.$route.params.meetingId\n    this.meetingName=this.$route.params.meetingName\n    this.joinroom()\n    console.log(this.meetingName)\n  },\n  mounted(){\n\n  },\n  methods: {\n    // 加入房间\n    joinroom() {\n      // if (this.roomId == \"\" || this.userId == \"\" || this.localStream != null) {\n      //   console.log(\"表单不能为空\");\n      // } else {\n        // 判断加入参数填写完全后执行一下代码\n        this.userin=1;\n        let sdkAppId = this.sdkAppId;\n        let userId = this.user.username;\n        let roomId = this.meetingId;\n        let client = this.client;\n        let localStream = this.localStream;\n        let userSig = genTestUserSig(userId).userSig; // 获取userSig\n        let clientConfig = {\n          mode: \"rtc\", // 会话模式为rtc实时音视频通话模式\n          sdkAppId,\n          userId,\n          userSig\n        };\n        client = TRTC.createClient(clientConfig); // 创建一个用户对象\n        this.client = client;\n        // 添加监听回调函数，当远端流加入时调用\n        client.on(\"stream-added\", event => {\n          // 判断此远端流用户是否是反复加入的用户\n          let index = this.isremoteStream(event.stream.getUserId());\n          this.l1=event.stream.getUserId()\n          if (index != -1) {\n            // 对反复加入聊天的用户，将原来该用户的视频流替换为新的视频流\n            this.unsubscribe[index].stop();\n            client.unsubscribe(this.remoteStream[index]);\n\n            this.remoteStream[index] = event.stream;\n\n            client.subscribe(this.remoteStream[index]);\n            event.stream.play(event.stream.getUserId());\n          } else {\n            this.remoteStream.push(event.stream);\n            client.subscribe(event.stream);\n            this.$nextTick(() => {\n              // 列表渲染完成后将新加的远端流进行播放\n              event.stream.play(event.stream.getUserId());\n            });\n          }\n        });\n\n        // 监听远端流退出的处理函数，将其从远端流数组中删除\n        client.on(\"stream-removed\", event => {\n          let index = this.isremoteStream(event.stream.getUserId());\n          this.remoteStream[index].stop();\n          this.remoteStream.splice(index, 1);\n        });\n\n        // 加入房间\n        client.join({ roomId: parseInt(roomId) }).then(() => {\n          let streamConfig = {\n            userId: userId,\n            video: true,\n            audio: true\n          };\n\n          localStream = TRTC.createStream(streamConfig); // 创建一个本地流\n          localStream.initialize().then(() => {\n            // 初始化本地流\n\n            client.publish(localStream); // 初始化完成后进行推流操作\n            localStream.play(\"mine\", {\n              // 本机播放自己的本地流\n              objectFit: \"cover\",\n              muted: true\n            });\n            this.localStream = localStream;\n            this.client = client;\n          });\n        });\n      // }\n    },\n    // 关闭/打开摄像头\n    muteLocalVideo () {\n      if (this.isVedio) {\n        this.isVedio = false\n        this.localStream.muteVideo()\n      } else {\n        this.isVedio = true\n        this.localStream.unmuteVideo()\n      }\n    },\n    // 关闭/打开麦克风\n    muteLocalAudio () {\n      if (this.isAudio) {\n        this.isAudio = false\n        this.localStream.muteAudio()\n      } else {\n        this.isAudio = true\n        this.localStream.unmuteAudio()\n      }\n    },\n    // 断开房间\n    leaveroom() {\n      this.userin=0\n      this.client.unpublish(this.localStream).then(() => {\n        // 先断开推流，然后完成后续操作\n        // 断开后远端的订阅会自动断开不需要手动调用unsubscribe方法，同时远端会触发stream-removed的监听回调\n\n        this.client.leave(); // 离开房间，注意本地端也会触发stream-removed的监听回调\n        this.localStream.stop(); // 停止本地的播放\n        this.localStream.close(); // 关闭本地流，关闭音频和视频的采集\n        this.localStream = null; // 初始状态\n      });\n    },\n\n\n    // 根据id获取uid\n    getUidByStreamId (streamId) {\n      for (let [userId, stream] of this.members_) {\n        if (stream.getUserId() === streamId) {\n          return userId\n        }\n      }\n    },\n    // 远端监听\n    updateStream () {\n      this.client.on('stream-removed', (event) => {\n        const remoteStream = event.stream\n        $(`${'#mask_' + remoteStream.getId()}`).hide()\n        $(`${'#status_' + remoteStream.getId()}`).show()\n      })\n      // 关闭摄像头\n      this.client.on('mute-video', (evt) => {\n        let streamId = this.getUidByStreamId(evt.userId)\n        if (streamId) {\n          $('#mask_' + streamId).show()\n        }\n      })\n      // 打开摄像头\n      this.client.on('unmute-video', (evt) => {\n        let streamId = this.getUidByStreamId(evt.userId)\n        if (streamId) {\n          $('#mask_' + streamId).hide()\n        }\n      })\n      // 关闭语音\n      this.client.on('mute-audio', (evt) => {\n        let streamId = this.getUidByStreamId(evt.userId)\n        $(`${'#user_' + streamId}`).find('#audio_' + streamId).hide().next().show()\n      })\n      // 打开语音\n      this.client.on('unmute-audio', (evt) => {\n        let streamId = this.getUidByStreamId(evt.userId)\n        $(`${'#user_' + streamId}`).find('#unaudio_' + streamId).hide().prev().show()\n      })\n    },\n\n\n    // 判断是否是已加入的远端流，这里我直接使用流的userId进行判断，可以更具需要自行设计，也可配合后端进行判断\n    // 没有在房间返回-1，有则返回远端流在数组中的下标\n    isremoteStream(userId) {\n      let remoteStream = this.remoteStream;\n      for (var i = 0; i < remoteStream.length; i++) {\n        if (remoteStream[i].getUserId() == userId) return i;\n      }\n      return -1;\n    },\n    init() {\n\n      let username = this.user.username;\n      let _this = this;\n      if (typeof (WebSocket) == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        let socketUrl = \"ws://localhost:9091/imserver/\" + username;\n        if (socket != null) {\n          socket.close();\n          socket = null;\n        }\n        // 开启一个websocket服务\n        socket = new WebSocket(socketUrl);\n        //打开事件\n        socket.onopen = function () {\n          console.log(\"websocket已打开\");\n        };\n        //  浏览器端收消息，获得从服务端发送过来的文本消息\n        socket.onmessage = function (msg) {\n          console.log(\"收到数据====\" + msg.data)\n          let data = JSON.parse(msg.data)  // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\n          if (data.users) {  // 获取在线人员信息\n            _this.users = data.users.filter(user => user.username )  // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\n          } else {\n            // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\n            //  // {\"from\": \"zhang\", \"text\": \"hello\"}\n            if (data.from === _this.chatUser) {\n              _this.messages.push(data)\n              // 构建消息内容\n              _this.createContent(data.from, null, data.text)\n            }\n          }\n        };\n  }\n},\n    send() {\n      if (!this.chatUser) {\n        this.$message({type: 'warning', message: \"请选择聊天对象\"})\n        return;\n      }\n      if (!this.text) {\n        this.$message({type: 'warning', message: \"请输入内容\"})\n      } else {\n        if (typeof (WebSocket) == \"undefined\") {\n          console.log(\"您的浏览器不支持WebSocket\");\n        } else {\n          console.log(\"您的浏览器支持WebSocket\");\n          // 组装待发送的消息 json\n          // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n          let message = {from: this.user.username, to: this.chatUser, text: this.text}\n          socket.send(JSON.stringify(message));  // 将组装好的json发送给服务端，由服务端进行转发\n          this.messages.push({user: this.user.username, text: this.text})\n          // 构建消息内容，本人消息\n          this.createContent(null, this.user.username, this.text)\n          this.text = '';\n        }\n      }\n    },\n    createContent(remoteUser, nowUser, text) {  // 这个方法是用来将 json的聊天消息数据转换成 html的。\n      let html\n      // 当前用户消息\n      if (nowUser) { // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\n            \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" +\n            \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" +\n            \"  </div>\\n\" +\n            \"  <div class=\\\"el-col el-col-2\\\">\\n\" +\n            \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\n            \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\n            \"  </span>\\n\" +\n            \"  </div>\\n\" +\n            \"</div>\";\n      } else if (remoteUser) {   // remoteUser表示远程用户聊天消息，蓝色的气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\n            \"  <div class=\\\"el-col el-col-2\\\" style=\\\"text-align: right\\\">\\n\" +\n            \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\n            \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\n            \"  </span>\\n\" +\n            \"  </div>\\n\" +\n            \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" +\n            \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" +\n            \"  </div>\\n\" +\n            \"</div>\";\n      }\n      console.log(html)\n      this.content += html;\n    },\n    send() {\n      if (!this.chatUser) {\n        this.$message({type: 'warning', message: \"请选择聊天对象\"})\n        return;\n      }\n      if (!this.text) {\n        this.$message({type: 'warning', message: \"请输入内容\"})\n      } else {\n        if (typeof (WebSocket) == \"undefined\") {\n          console.log(\"您的浏览器不支持WebSocket\");\n        } else {\n          console.log(\"您的浏览器支持WebSocket\");\n          // 组装待发送的消息 json\n          // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n          let message = {from: this.user.username, to: this.chatUser, text: this.text}\n          socket.send(JSON.stringify(message));  // 将组装好的json发送给服务端，由服务端进行转发\n          this.messages.push({user: this.user.username, text: this.text})\n          // 构建消息内容，本人消息\n          this.createContent(null, this.user.username, this.text)\n          this.text = '';\n        }\n      }\n    },\n    createContent(remoteUser, nowUser, text) {  // 这个方法是用来将 json的聊天消息数据转换成 html的。\n      let html\n      // 当前用户消息\n      if (nowUser) { // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\n            \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: right; padding-right: 10px\\\">\\n\" +\n            \"    <div class=\\\"tip left\\\">\" + text + \"</div>\\n\" +\n            \"  </div>\\n\" +\n            \"  <div class=\\\"el-col el-col-2\\\">\\n\" +\n            \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\n            \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\n            \"  </span>\\n\" +\n            \"  </div>\\n\" +\n            \"</div>\";\n      } else if (remoteUser) {   // remoteUser表示远程用户聊天消息，蓝色的气泡\n        html = \"<div class=\\\"el-row\\\" style=\\\"padding: 5px 0\\\">\\n\" +\n            \"  <div class=\\\"el-col el-col-2\\\" style=\\\"text-align: right\\\">\\n\" +\n            \"  <span class=\\\"el-avatar el-avatar--circle\\\" style=\\\"height: 40px; width: 40px; line-height: 40px;\\\">\\n\" +\n            \"    <img src=\\\"https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png\\\" style=\\\"object-fit: cover;\\\">\\n\" +\n            \"  </span>\\n\" +\n            \"  </div>\\n\" +\n            \"  <div class=\\\"el-col el-col-22\\\" style=\\\"text-align: left; padding-left: 10px\\\">\\n\" +\n            \"    <div class=\\\"tip right\\\">\" + text + \"</div>\\n\" +\n            \"  </div>\\n\" +\n            \"</div>\";\n      }\n      console.log(html)\n      this.content += html;\n    },\n\n  }}\n</script>\n\n"]},"metadata":{},"sourceType":"module"}