{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\n\n/* eslint-disable */\nimport { saveAs } from 'file-saver';\nimport XLSX from 'xlsx';\n\nfunction generateArray(table) {\n  var out = [];\n  var rows = table.querySelectorAll('tr');\n  var ranges = [];\n\n  for (var R = 0; R < rows.length; ++R) {\n    var outRow = [];\n    var row = rows[R];\n    var columns = row.querySelectorAll('td');\n\n    for (var C = 0; C < columns.length; ++C) {\n      var cell = columns[C];\n      var colspan = cell.getAttribute('colspan');\n      var rowspan = cell.getAttribute('rowspan');\n      var cellValue = cell.innerText;\n      if (cellValue !== \"\" && cellValue == +cellValue) cellValue = +cellValue; //Skip ranges\n\n      ranges.forEach(function (range) {\n        if (R >= range.s.r && R <= range.e.r && outRow.length >= range.s.c && outRow.length <= range.e.c) {\n          for (var i = 0; i <= range.e.c - range.s.c; ++i) outRow.push(null);\n        }\n      }); //Handle Row Span\n\n      if (rowspan || colspan) {\n        rowspan = rowspan || 1;\n        colspan = colspan || 1;\n        ranges.push({\n          s: {\n            r: R,\n            c: outRow.length\n          },\n          e: {\n            r: R + rowspan - 1,\n            c: outRow.length + colspan - 1\n          }\n        });\n      }\n\n      ; //Handle Value\n\n      outRow.push(cellValue !== \"\" ? cellValue : null); //Handle Colspan\n\n      if (colspan) for (var k = 0; k < colspan - 1; ++k) outRow.push(null);\n    }\n\n    out.push(outRow);\n  }\n\n  return [out, ranges];\n}\n\n;\n\nfunction datenum(v, date1904) {\n  if (date1904) v += 1462;\n  var epoch = Date.parse(v);\n  return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n}\n\nfunction sheet_from_array_of_arrays(data, opts) {\n  var ws = {};\n  var range = {\n    s: {\n      c: 10000000,\n      r: 10000000\n    },\n    e: {\n      c: 0,\n      r: 0\n    }\n  };\n\n  for (var R = 0; R != data.length; ++R) {\n    for (var C = 0; C != data[R].length; ++C) {\n      if (range.s.r > R) range.s.r = R;\n      if (range.s.c > C) range.s.c = C;\n      if (range.e.r < R) range.e.r = R;\n      if (range.e.c < C) range.e.c = C;\n      var cell = {\n        v: data[R][C]\n      };\n      if (cell.v == null) continue;\n      var cell_ref = XLSX.utils.encode_cell({\n        c: C,\n        r: R\n      });\n      if (typeof cell.v === 'number') cell.t = 'n';else if (typeof cell.v === 'boolean') cell.t = 'b';else if (cell.v instanceof Date) {\n        cell.t = 'n';\n        cell.z = XLSX.SSF._table[14];\n        cell.v = datenum(cell.v);\n      } else cell.t = 's';\n      ws[cell_ref] = cell;\n    }\n  }\n\n  if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);\n  return ws;\n}\n\nfunction Workbook() {\n  if (!(this instanceof Workbook)) return new Workbook();\n  this.SheetNames = [];\n  this.Sheets = {};\n}\n\nfunction s2ab(s) {\n  var buf = new ArrayBuffer(s.length);\n  var view = new Uint8Array(buf);\n\n  for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n\n  return buf;\n}\n\nexport function export_table_to_excel(id) {\n  var theTable = document.getElementById(id);\n  var oo = generateArray(theTable);\n  var ranges = oo[1];\n  /* original data */\n\n  var data = oo[0];\n  var ws_name = \"SheetJS\";\n  var wb = new Workbook(),\n      ws = sheet_from_array_of_arrays(data);\n  /* add ranges to worksheet */\n  // ws['!cols'] = ['apple', 'banan'];\n\n  ws['!merges'] = ranges;\n  /* add worksheet to workbook */\n\n  wb.SheetNames.push(ws_name);\n  wb.Sheets[ws_name] = ws;\n  var wbout = XLSX.write(wb, {\n    bookType: 'xlsx',\n    bookSST: false,\n    type: 'binary'\n  });\n  saveAs(new Blob([s2ab(wbout)], {\n    type: \"application/octet-stream\"\n  }), \"test.xlsx\");\n}\nexport function export_json_to_excel({\n  multiHeader = [],\n  header,\n  data,\n  filename,\n  merges = [],\n  autoWidth = true,\n  bookType = 'xlsx'\n} = {}) {\n  /* original data */\n  filename = filename || 'excel-list';\n  data = [...data];\n  data.unshift(header);\n\n  for (let i = multiHeader.length - 1; i > -1; i--) {\n    data.unshift(multiHeader[i]);\n  }\n\n  var ws_name = \"SheetJS\";\n  var wb = new Workbook(),\n      ws = sheet_from_array_of_arrays(data);\n\n  if (merges.length > 0) {\n    if (!ws['!merges']) ws['!merges'] = [];\n    merges.forEach(item => {\n      ws['!merges'].push(XLSX.utils.decode_range(item));\n    });\n  }\n\n  if (autoWidth) {\n    /*设置worksheet每列的最大宽度*/\n    const colWidth = data.map(row => row.map(val => {\n      /*先判断是否为null/undefined*/\n      if (val == null) {\n        return {\n          'wch': 10\n        };\n      }\n      /*再判断是否为中文*/\n      else if (val.toString().charCodeAt(0) > 255) {\n        return {\n          'wch': val.toString().length * 2\n        };\n      } else {\n        return {\n          'wch': val.toString().length\n        };\n      }\n    }));\n    /*以第一行为初始值*/\n\n    let result = colWidth[0];\n\n    for (let i = 1; i < colWidth.length; i++) {\n      for (let j = 0; j < colWidth[i].length; j++) {\n        if (result[j]['wch'] < colWidth[i][j]['wch']) {\n          result[j]['wch'] = colWidth[i][j]['wch'];\n        }\n      }\n    }\n\n    ws['!cols'] = result;\n  }\n  /* add worksheet to workbook */\n\n\n  wb.SheetNames.push(ws_name);\n  wb.Sheets[ws_name] = ws;\n  var wbout = XLSX.write(wb, {\n    bookType: bookType,\n    bookSST: false,\n    type: 'binary'\n  });\n  saveAs(new Blob([s2ab(wbout)], {\n    type: \"application/octet-stream\"\n  }), `${filename}.${bookType}`);\n}\n\nfunction formatJson(jsonSource, jsonFillter) {\n  return jsonSource.map(v => jsonFillter.map(j => {\n    return v[j];\n  }));\n}\n\nexport function export_json_to_excel2(th, jsonSource, jsonFillter, name) {\n  const data = formatJson(jsonSource, jsonFillter);\n  export_json_to_excel({\n    header: th,\n    data,\n    filename: name\n  });\n}","map":{"version":3,"names":["saveAs","XLSX","generateArray","table","out","rows","querySelectorAll","ranges","R","length","outRow","row","columns","C","cell","colspan","getAttribute","rowspan","cellValue","innerText","forEach","range","s","r","e","c","i","push","k","datenum","v","date1904","epoch","Date","parse","UTC","sheet_from_array_of_arrays","data","opts","ws","cell_ref","utils","encode_cell","t","z","SSF","_table","encode_range","Workbook","SheetNames","Sheets","s2ab","buf","ArrayBuffer","view","Uint8Array","charCodeAt","export_table_to_excel","id","theTable","document","getElementById","oo","ws_name","wb","wbout","write","bookType","bookSST","type","Blob","export_json_to_excel","multiHeader","header","filename","merges","autoWidth","unshift","item","decode_range","colWidth","map","val","toString","result","j","formatJson","jsonSource","jsonFillter","export_json_to_excel2","th","name"],"sources":["C:/Users/86134/Desktop/爱读书/springboot-vue/vue/src/utils/Export2Excel.js"],"sourcesContent":["/* eslint-disable */\r\nimport { saveAs } from 'file-saver'\r\nimport XLSX from 'xlsx'\r\n\r\nfunction generateArray(table) {\r\n    var out = [];\r\n    var rows = table.querySelectorAll('tr');\r\n    var ranges = [];\r\n    for (var R = 0; R < rows.length; ++R) {\r\n        var outRow = [];\r\n        var row = rows[R];\r\n        var columns = row.querySelectorAll('td');\r\n        for (var C = 0; C < columns.length; ++C) {\r\n            var cell = columns[C];\r\n            var colspan = cell.getAttribute('colspan');\r\n            var rowspan = cell.getAttribute('rowspan');\r\n            var cellValue = cell.innerText;\r\n            if (cellValue !== \"\" && cellValue == +cellValue) cellValue = +cellValue;\r\n\r\n            //Skip ranges\r\n            ranges.forEach(function (range) {\r\n                if (R >= range.s.r && R <= range.e.r && outRow.length >= range.s.c && outRow.length <= range.e.c) {\r\n                    for (var i = 0; i <= range.e.c - range.s.c; ++i) outRow.push(null);\r\n                }\r\n            });\r\n\r\n            //Handle Row Span\r\n            if (rowspan || colspan) {\r\n                rowspan = rowspan || 1;\r\n                colspan = colspan || 1;\r\n                ranges.push({\r\n                    s: {\r\n                        r: R,\r\n                        c: outRow.length\r\n                    },\r\n                    e: {\r\n                        r: R + rowspan - 1,\r\n                        c: outRow.length + colspan - 1\r\n                    }\r\n                });\r\n            };\r\n\r\n            //Handle Value\r\n            outRow.push(cellValue !== \"\" ? cellValue : null);\r\n\r\n            //Handle Colspan\r\n            if (colspan)\r\n                for (var k = 0; k < colspan - 1; ++k) outRow.push(null);\r\n        }\r\n        out.push(outRow);\r\n    }\r\n    return [out, ranges];\r\n};\r\n\r\nfunction datenum(v, date1904) {\r\n    if (date1904) v += 1462;\r\n    var epoch = Date.parse(v);\r\n    return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\r\n}\r\n\r\nfunction sheet_from_array_of_arrays(data, opts) {\r\n    var ws = {};\r\n    var range = {\r\n        s: {\r\n            c: 10000000,\r\n            r: 10000000\r\n        },\r\n        e: {\r\n            c: 0,\r\n            r: 0\r\n        }\r\n    };\r\n    for (var R = 0; R != data.length; ++R) {\r\n        for (var C = 0; C != data[R].length; ++C) {\r\n            if (range.s.r > R) range.s.r = R;\r\n            if (range.s.c > C) range.s.c = C;\r\n            if (range.e.r < R) range.e.r = R;\r\n            if (range.e.c < C) range.e.c = C;\r\n            var cell = {\r\n                v: data[R][C]\r\n            };\r\n            if (cell.v == null) continue;\r\n            var cell_ref = XLSX.utils.encode_cell({\r\n                c: C,\r\n                r: R\r\n            });\r\n\r\n            if (typeof cell.v === 'number') cell.t = 'n';\r\n            else if (typeof cell.v === 'boolean') cell.t = 'b';\r\n            else if (cell.v instanceof Date) {\r\n                cell.t = 'n';\r\n                cell.z = XLSX.SSF._table[14];\r\n                cell.v = datenum(cell.v);\r\n            } else cell.t = 's';\r\n\r\n            ws[cell_ref] = cell;\r\n        }\r\n    }\r\n    if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range);\r\n    return ws;\r\n}\r\n\r\nfunction Workbook() {\r\n    if (!(this instanceof Workbook)) return new Workbook();\r\n    this.SheetNames = [];\r\n    this.Sheets = {};\r\n}\r\n\r\nfunction s2ab(s) {\r\n    var buf = new ArrayBuffer(s.length);\r\n    var view = new Uint8Array(buf);\r\n    for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\r\n    return buf;\r\n}\r\n\r\nexport function export_table_to_excel(id) {\r\n    var theTable = document.getElementById(id);\r\n    var oo = generateArray(theTable);\r\n    var ranges = oo[1];\r\n\r\n    /* original data */\r\n    var data = oo[0];\r\n    var ws_name = \"SheetJS\";\r\n\r\n    var wb = new Workbook(),\r\n        ws = sheet_from_array_of_arrays(data);\r\n\r\n    /* add ranges to worksheet */\r\n    // ws['!cols'] = ['apple', 'banan'];\r\n    ws['!merges'] = ranges;\r\n\r\n    /* add worksheet to workbook */\r\n    wb.SheetNames.push(ws_name);\r\n    wb.Sheets[ws_name] = ws;\r\n\r\n    var wbout = XLSX.write(wb, {\r\n        bookType: 'xlsx',\r\n        bookSST: false,\r\n        type: 'binary'\r\n    });\r\n\r\n    saveAs(new Blob([s2ab(wbout)], {\r\n        type: \"application/octet-stream\"\r\n    }), \"test.xlsx\")\r\n}\r\n\r\nexport function export_json_to_excel({\r\n                                         multiHeader = [],\r\n                                         header,\r\n                                         data,\r\n                                         filename,\r\n                                         merges = [],\r\n                                         autoWidth = true,\r\n                                         bookType = 'xlsx'\r\n                                     } = {}) {\r\n    /* original data */\r\n    filename = filename || 'excel-list'\r\n    data = [...data]\r\n    data.unshift(header);\r\n\r\n    for (let i = multiHeader.length - 1; i > -1; i--) {\r\n        data.unshift(multiHeader[i])\r\n    }\r\n\r\n    var ws_name = \"SheetJS\";\r\n    var wb = new Workbook(),\r\n        ws = sheet_from_array_of_arrays(data);\r\n\r\n    if (merges.length > 0) {\r\n        if (!ws['!merges']) ws['!merges'] = [];\r\n        merges.forEach(item => {\r\n            ws['!merges'].push(XLSX.utils.decode_range(item))\r\n        })\r\n    }\r\n\r\n    if (autoWidth) {\r\n        /*设置worksheet每列的最大宽度*/\r\n        const colWidth = data.map(row => row.map(val => {\r\n            /*先判断是否为null/undefined*/\r\n            if (val == null) {\r\n                return {\r\n                    'wch': 10\r\n                };\r\n            }\r\n            /*再判断是否为中文*/\r\n            else if (val.toString().charCodeAt(0) > 255) {\r\n                return {\r\n                    'wch': val.toString().length * 2\r\n                };\r\n            } else {\r\n                return {\r\n                    'wch': val.toString().length\r\n                };\r\n            }\r\n        }))\r\n        /*以第一行为初始值*/\r\n        let result = colWidth[0];\r\n        for (let i = 1; i < colWidth.length; i++) {\r\n            for (let j = 0; j < colWidth[i].length; j++) {\r\n                if (result[j]['wch'] < colWidth[i][j]['wch']) {\r\n                    result[j]['wch'] = colWidth[i][j]['wch'];\r\n                }\r\n            }\r\n        }\r\n        ws['!cols'] = result;\r\n    }\r\n\r\n    /* add worksheet to workbook */\r\n    wb.SheetNames.push(ws_name);\r\n    wb.Sheets[ws_name] = ws;\r\n\r\n    var wbout = XLSX.write(wb, {\r\n        bookType: bookType,\r\n        bookSST: false,\r\n        type: 'binary'\r\n    });\r\n    saveAs(new Blob([s2ab(wbout)], {\r\n        type: \"application/octet-stream\"\r\n    }), `${filename}.${bookType}`);\r\n}\r\n\r\nfunction formatJson(jsonSource, jsonFillter) {\r\n    return jsonSource.map(v => jsonFillter.map(j => {\r\n        return v[j]\r\n    }))\r\n}\r\n\r\nexport function export_json_to_excel2(th, jsonSource, jsonFillter, name) {\r\n    const data = formatJson(jsonSource, jsonFillter)\r\n    export_json_to_excel({header: th, data, filename: name})\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}