{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Preview from './components/Preview';\nimport Chat from './components/Chat';\nimport adapter from 'webrtc-adapter';\nimport { getUrl } from '@/api/websocketInfo';\nimport moment from \"moment\";\nexport default {\n  name: 'Meeting',\n  components: {\n    Preview,\n    Chat\n  },\n\n  data() {\n    var valiRoomId = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入5-10位纯数字'));\n      } else {\n        var reg = /^\\d{5,10}$/;\n\n        if (!reg.test(value)) {\n          return callback(new Error('请输入5-10位纯数字'));\n        }\n\n        callback();\n      }\n    };\n\n    return {\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      show: false,\n      users: [],\n      screenHeight: 0,\n      ch: '',\n      meetingId: '0',\n      dialogFormVisible: false,\n      localWebsocket: undefined,\n      wsUrl: undefined,\n      receiveMsg: '',\n      isUserList: true,\n      //是否显示用户列表\n      isPreview: true,\n      //是否显示预览框\n      isChat: true,\n      //是否显示聊天框\n      isInRoom: false,\n      isBan: false,\n      isView: true,\n      isMuted: false,\n      fullScreenId: '',\n      clients: [{\n        userId: '0',\n        nickname: '未连接',\n        roomId: '0',\n        localStream: undefined,\n        peerConnection: undefined,\n        muted: false,\n        view: true,\n        chat: true,\n        isSelf: false,\n        isRoomAdmin: false,\n        nowStream: 'screen'\n      }],\n      roomFormData: {\n        nickname: '',\n        roomId: '',\n        roomPw: '',\n        radio: '2'\n      },\n      someData: {\n        meetingId: ''\n      },\n      roomFromRules: {\n        roomId: [{\n          validator: valiRoomId,\n          trigger: 'blur'\n        }],\n        nickname: [{\n          required: true,\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 20,\n          message: '长度在 1 到 20 个字符',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n\n  created() {\n    this.someData.meetingId = this.$route.params.meetingId;\n    console.log(this.someData);\n  },\n\n  async mounted() {\n    this.getScreenSize(); // this.dialogFormVisible = true\n\n    this.meetingId = this.$route.params.meetingId;\n    this.meetingName = this.$route.params.meetingName;\n    this.roomId = this.$route.params.roomId;\n    this.dialogFormVisible = false;\n    this.udid = this.$route.params.udid;\n    this.qwq = this.$route.params.qwq;\n    this.roomFormData.nickname = this.user.nickname;\n    this.roomFormData.roomId = this.roomId;\n    this.$erd.listenTo(document.getElementById(\"bar\"), function (ele) {\n      console.log('=======offsetWidth', ele.offsetWidth);\n      console.log('=======clientWidth', ele.clientWidth);\n      console.log('=======offsetHeight', ele.offsetHeight);\n      console.log('=======offsetHeight', ele.clientHeight);\n    });\n\n    try {\n      await this.initLocalWebsocket();\n    } catch (e) {\n      console.log('websocket错误:' + e.message);\n      this.$message.error('网络连接错误!');\n      this.closeView();\n    }\n  },\n\n  beforeDestroy() {\n    this.$erd.uninstall(this.$refs.bar);\n  },\n\n  destroyed() {\n    if (this.isInRoom) {\n      const msg = new MessageModel(TYPE_COMMAND_KICK, this.roomFormData.roomId, '', this.clients[0].userId);\n      this.wsSend(msg);\n    }\n\n    if (this.localWebsocket !== undefined) {\n      this.localWebsocket.close(); // 离开路由之后断开localWebsocket连接\n    }\n\n    this.stopV();\n  },\n\n  methods: {\n    getScreenSize() {\n      this.screenWidth = screen.width;\n      this.screenHeight = screen.height;\n    },\n\n    // 左箭头\n    leftSlide() {\n      // 保存滚动盒子左侧已滚动的距离\n      let left = this.$refs.wrapperCon.scrollLeft;\n      let num = 0;\n      clearInterval(this.timer);\n      this.timer = null;\n      this.timer = setInterval(() => {\n        //   !left:已经滚动到最左侧\n        //   一次性滚动距离（可调节）\n        if (!left || num >= 300) {\n          // 停止滚动\n          clearInterval(this.timer);\n          this.timer = null;\n          return;\n        } // 给滚动盒子元素赋值向左滚动距离\n\n\n        this.$refs.wrapperCon.scrollLeft = left -= 30; // 保存向左滚动距离（方便判断一次性滚动多少距离）\n\n        num += 30;\n      }, 20); // 20：速度（可调节）\n    },\n\n    rightSlide() {\n      // 保存滚动盒子左侧已滚动的距离\n      let left = this.$refs.wrapperCon.scrollLeft; // 保存元素的整体宽度\n\n      let scrollWidth = this.$refs.wrapperCon.scrollWidth; // 保存元素的可见宽度\n\n      let clientWidth = this.$refs.wrapperCon.clientWidth;\n      let num = 0;\n      clearInterval(this.timer);\n      this.timer = setInterval(() => {\n        // 已经滚动距离+可见宽度\n        // left+clientWidth>=scrollWidth：滚动到最右侧\n        // num>=300一次性滚动距离\n        if (left + clientWidth >= scrollWidth || num >= 300) {\n          clearInterval(this.timer);\n          return;\n        } // 给滚动盒子元素赋值向左滚动距离\n\n\n        this.$refs.wrapperCon.scrollLeft = left += 30; // 保存向左滚动距离（方便判断一次性滚动多少距离）\n\n        num += 30;\n      }, 20); // 20：速度（可调节）\n    },\n\n    // 设置本地播放器\n    async startV() {\n      if (this.roomFormData.radio === '2') {\n        console.log(adapter.browserDetails.browser);\n        var mediaStream = await navigator.mediaDevices.getDisplayMedia(constraints);\n        var audioStream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: false\n        });\n        console.log('本地播放器设置');\n        const c0 = {\n          userId: '0',\n          roomId: '0',\n          nickname: '未连接',\n          localStream: mediaStream,\n          peerConnection: undefined,\n          muted: false,\n          view: true,\n          chat: true,\n          isSelf: true,\n          isRoomAdmin: false,\n          nowStream: 'screen'\n        };\n        c0.localStream.addTrack(audioStream.getAudioTracks()[0]);\n        this.$set(this.clients, 0, c0);\n        console.log('本地流');\n        console.log(this.clients[0].localStream);\n        console.log('本地播放器设置成功');\n      } else {\n        console.log(adapter.browserDetails.browser);\n        var audioStream1 = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: true\n        });\n        console.log('摄像头设置');\n        const c01 = {\n          userId: '0',\n          roomId: '0',\n          nickname: '未连接',\n          localStream: audioStream1,\n          peerConnection: undefined,\n          muted: false,\n          view: true,\n          chat: true,\n          isSelf: true,\n          isRoomAdmin: false,\n          nowStream: 'camera'\n        };\n        this.$set(this.clients, 0, c01);\n        console.log('本地流');\n        console.log(this.clients[0].localStream);\n        console.log('本地摄像头设置成功');\n      }\n    },\n\n    stopV() {\n      this.clients[0].localStream.getTracks().forEach(function (track) {\n        track.stop();\n      });\n    },\n\n    addV() {\n      navigator.mediaDevices.getDisplayMedia({\n        constraints\n      }).then(stream => {\n        this.clients[0].localStream = stream;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n\n    async changeStream(userId) {\n      if (this.clients[0].nowStream === 'screen') {\n        navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        }).then(mediaStream => {\n          this.stopV();\n          console.log('切换为摄像头');\n          this.clients[0].localStream = mediaStream;\n          console.log('本地摄像头设置成功');\n        }).catch(e => {\n          console.log('本地摄像头设置失败 ' + e.message);\n        });\n        this.clients[0].nowStream = 'camera';\n      } else {\n        this.stopV();\n        var mediaStream = await navigator.mediaDevices.getDisplayMedia(constraints);\n        var audioStream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: false\n        });\n        console.log('切换为屏幕');\n        this.clients[0].localStream = mediaStream;\n        this.clients[0].localStream.addTrack(audioStream.getAudioTracks()[0]);\n        console.log('本地播放器设置成功');\n        this.clients[0].nowStream = 'screen';\n      }\n    },\n\n    ban(userId) {\n      console.log('ban:' + userId);\n\n      if (userId === '') {\n        // 全体禁言\n        if (this.isBan) {\n          // 恢复\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFormData.roomId, 'false', '');\n          this.wsSend(msg);\n        } else {\n          // 全体禁言\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFormData.roomId, 'true', '');\n          this.wsSend(msg);\n        }\n      } else {\n        if (this.clients[userId].chat) {\n          // 全员发送chat关闭\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFormData.roomId, 'true', userId);\n          this.wsSend(msg);\n        } else {\n          // 全员发送chat开启\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFormData.roomId, 'false', userId);\n          this.wsSend(msg);\n        }\n      }\n    },\n\n    changeMicro(userId) {\n      console.log('changeMicro:' + userId);\n      const uid = userId.toString();\n\n      if (userId === '') {\n        if (this.isMuted) {\n          const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'false', '');\n          this.wsSend(msg);\n        } else {\n          const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'true', '');\n          this.wsSend(msg);\n        }\n      } else {\n        if (uid === this.clients[0].userId) {\n          // 自己开关麦克风，通知所有人\n          if (this.clients[0].muted) {\n            // 打开麦克风\n            console.log();\n            const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'false', this.clients[0].userId);\n            this.wsSend(msg);\n          } else {\n            // 关闭麦克风\n            const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'true', this.clients[0].userId);\n            this.wsSend(msg);\n          }\n        } else {\n          // 别人\n          if (this.clients[0].isRoomAdmin) {\n            // 自己是管理员，就要彻底开关他的麦克风\n            if (this.clients[Number(userId)].muted) {\n              // 通知所有人打开此人麦克风\n              const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'false', userId);\n              this.wsSend(msg);\n            } else {\n              // 通知所有人关闭此人麦克风\n              const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'true', userId);\n              this.wsSend(msg);\n            }\n          } else {\n            if (this.clients[Number(userId)].muted) {\n              this.clients[Number(userId)].muted = false;\n            } else {\n              this.clients[Number(userId)].muted = true;\n            }\n          }\n        }\n      }\n    },\n\n    fullScreen(userId) {\n      console.log('fullScreen:' + userId);\n\n      if (userId === this.clients[0].userId) {\n        console.log(this.clients[0].localStream);\n        this.$refs.video_full.srcObject = this.clients[0].localStream;\n        this.fullScreenId = '0';\n      } else {\n        console.log(this.clients[userId].localStream);\n        this.$refs.video_full.srcObject = this.clients[userId].localStream;\n        this.fullScreenId = userId;\n      }\n    },\n\n    kick(userId) {\n      console.log('kick:' + userId);\n      const msg = new MessageModel(TYPE_COMMAND_KICK, this.roomFormData.roomId, '', userId);\n      this.wsSend(msg);\n      console.log(\"踢出\"); //签退\n\n      let t1 = moment().startOf('millisecond').format(\"YYYY-MM-DD HH:mm:ss\");\n      const form3 = {\n        id: this.udid,\n        meetingId: this.meetingId,\n        userId: userId\n      };\n      this.request.get(\"/meeting/MyMeeting/\" + this.meetingId).then(res => {\n        const meetinginfo = res.data;\n        meetinginfo.stage = 2;\n\n        if (meetinginfo.createUser === userId) {\n          this.request.post(\"/meeting/MyMeeting\", meetinginfo).then(res => {\n            if (res.code === '200') {\n              this.$message.success(\"已结束会议!\");\n            }\n          });\n        }\n      });\n      form3.signOutDate = JSON.parse(JSON.stringify(t1));\n      this.request.post(\"/AboutMeeting/manualSign\", form3).then(res => {\n        if (res.code === '200') {\n          this.$message.success(\"签退成功\");\n        } else {\n          this.$message.success(\"签退失败，请联系会议申请人员\");\n        }\n      }); //踢出去\n      // this.ch=2\n      // this.init(this.ch)\n    },\n\n    changeView(userId) {\n      console.log(this.clients);\n      const uid = userId.toString();\n\n      if (userId === '') {\n        if (this.isView) {\n          const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'false', '');\n          this.wsSend(msg);\n        } else {\n          const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'true', '');\n          this.wsSend(msg);\n        }\n      } else {\n        if (uid === this.clients[0].userId) {\n          // 自己开关视频，通知所有人\n          if (this.clients[0].view) {\n            // 打开视频\n            const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'false', this.clients[0].userId);\n            this.wsSend(msg);\n          } else {\n            // 关闭视频\n            const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'true', this.clients[0].userId);\n            this.wsSend(msg);\n          }\n        } else {\n          // 别人\n          if (this.clients[0].isRoomAdmin) {\n            // 自己是管理员，就要彻底开关他的视频\n            // console.log(\"0.0\")\n            if (this.clients[Number(userId)].view) {\n              // 通知所有人打开此人视频\n              const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'false', userId);\n              this.wsSend(msg);\n            } else {\n              // 通知所有人关闭此人视频\n              const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'true', userId);\n              this.wsSend(msg);\n            }\n          } else {\n            if (this.clients[Number(userId)].view) {\n              this.clients[Number(userId)].view = false;\n\n              if (this.fullScreenId !== '0') {\n                this.$refs.video_full.srcObject = null;\n              }\n            } else {\n              this.clients[Number(userId)].view = true;\n            }\n          }\n        }\n      }\n    },\n\n    changeData() {\n      console.log('子组件给我传递了一个方法');\n    },\n\n    notice(msg) {\n      console.log('notice:' + msg);\n    },\n\n    sendChat(msg) {\n      console.log('sendChat:' + msg);\n\n      if (!this.clients[0].chat) {\n        this.$message.error('已被禁言...');\n        return;\n      }\n\n      this.request.post(\"/message\", {\n        \"userId\": this.user.id,\n        \"meetingId\": this.meetingId,\n        \"content\": msg\n      }).then(res => {\n        if (res.code === '200') {\n          this.$message.success(\"发送成功\");\n        } else {\n          this.$message.success(\"发送失败！\");\n        }\n      });\n      msg = new MessageModel(TYPE_COMMAND_CHAT, this.roomFormData.nickname, msg, this.user.id, this.user.avatar);\n      this.wsSend(msg);\n    },\n\n    receiveMsgHandle(message) {\n      console.log(message);\n      this.receiveMsg = {\n        content: message.roomId + ':' + message.message + '\\n',\n        timestamp: Date.now() // 或者使用一个计数器\n\n      };\n    },\n\n    createOrEnterRoom(method) {\n      // 进入房间\n      this.$refs.roomFrom.validate(valid => {\n        if (valid) {\n          var msg;\n\n          if (method === 'create') {\n            msg = new MessageModel(TYPE_COMMAND_ROOM_CREATE, this.roomFormData.roomId, this.roomFormData.nickname, this.user.id, this.roomFormData.roomPw);\n            console.log('创建房间:' + JSON.stringify(msg));\n            this.wsSend(msg);\n          } else {\n            console.log('加入房间:' + this.roomFormData.roomId);\n            msg = new MessageModel(TYPE_COMMAND_ROOM_ENTER, this.roomFormData.roomId, this.roomFormData.nickname, this.user.id, this.roomFormData.roomPw);\n            this.wsSend(msg);\n          }\n        } else {\n          console.log('表单验证错误');\n          return false;\n        }\n      });\n    },\n\n    successHandle(message) {\n      // store.dispatch('user/setNickname', this.roomFormData.nickname)\n      this.startV().then(() => {\n        this.isInRoom = true;\n        this.dialogFormVisible = false;\n        this.clients[0].userId = message.userId;\n        this.clients[0].roomId = message.roomId;\n        this.clients[0].nickname = this.roomFormData.nickname;\n\n        if (message.message === 'create') {\n          console.log('创建房间成功');\n          this.clients[0].isRoomAdmin = true;\n        } else {\n          console.log('进入房间成功');\n          this.clients[0].isRoomAdmin = false;\n        } // 广播 自己准备好了,其他用户收到后就会创建连接\n\n\n        var msg = new MessageModel(TYPE_COMMAND_READY, this.roomFormData.roomId, this.roomFormData.nickname, message.userId, '', this.clients[0].isRoomAdmin);\n        console.log('发送准备完毕广播' + msg);\n        this.wsSend(msg);\n        this.$message.success('成功!');\n      });\n    },\n\n    readyHandle(message) {\n      // 收到上线的用户准备好信号，创建RTCPeerConnectio准备与他连接并发送offer\n      if (this.clients[0].userId === message.userId) {\n        // 是自己准备好了\n        console.log(\"=======NO+======\" + message);\n      } else {\n        console.log(\"我准备好了\");\n        console.log(message);\n        var rtcPeerConnection = new RTCPeerConnection(iceServers);\n        rtcPeerConnection.userId = message.userId;\n\n        for (const track of this.clients[0].localStream.getTracks()) {\n          rtcPeerConnection.addTrack(track, this.clients[0].localStream);\n        }\n\n        rtcPeerConnection.ontrack = this.onTrack;\n        rtcPeerConnection.onicecandidate = this.onIceCandidate;\n        const remoteClient = {\n          userId: message.userId,\n          roomId: message.roomId,\n          nickname: message.message,\n          localStream: undefined,\n          peerConnection: rtcPeerConnection,\n          muted: false,\n          view: true,\n          chat: true,\n          isSelf: false,\n          // isRoomAdmin: JSON.parse(message.userId),\n          isRoomAdmin: false,\n          nowStream: 'screen'\n        };\n        this.$set(this.clients, Number(message.userId), remoteClient);\n        console.log('准备完毕,添加了一个连接'); // this.ch=1\n        // this.init(this.ch)\n\n        console.log(this.clients);\n        console.log('创建offer');\n        rtcPeerConnection.createOffer(offerOptions).then(description => {\n          console.log('创建offer,设置本地Description');\n          console.log(description);\n          rtcPeerConnection.setLocalDescription(description);\n          var msg = new MessageModel(TYPE_COMMAND_OFFER, this.clients[0].roomId, this.messageDateToString(description), message.userId, this.roomFormData.nickname, this.clients[0].isRoomAdmin); // 字段不够用,把名字临时放在roomPw字段\n\n          console.log('发送offer');\n          this.wsSend(msg);\n        }).catch();\n      }\n    },\n\n    offerHandle(message) {\n      var rtcPeerConnection = new RTCPeerConnection(iceServers);\n      rtcPeerConnection.userId = message.userId;\n      console.log('本地流');\n      console.log(this.clients[0].localStream);\n\n      for (const track of this.clients[0].localStream.getTracks()) {\n        rtcPeerConnection.addTrack(track, this.clients[0].localStream);\n      }\n\n      rtcPeerConnection.ontrack = this.onTrack;\n      rtcPeerConnection.onicecandidate = this.onIceCandidate;\n      const remoteClient = {\n        userId: message.userId,\n        roomId: message.roomId,\n        nickname: message.roomPw,\n        localStream: undefined,\n        peerConnection: rtcPeerConnection,\n        muted: false,\n        view: true,\n        chat: true,\n        isSelf: false,\n        isRoomAdmin: JSON.parse(message.userId),\n        nowStream: 'screen'\n      };\n      this.$set(this.clients, Number(message.userId), remoteClient);\n      console.log('接受到offer,添加了一个连接'); // this.ch=1\n      // this.init(this.ch)\n      // console.log(this.clients)\n\n      var sdp = JSON.parse(message.message);\n      rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(sdp)).then(console.log('收到offer,设置远程Description 完毕'));\n      rtcPeerConnection.createAnswer(offerOptions).then(description => {\n        console.log('创建answer,设置本地Description');\n        rtcPeerConnection.setLocalDescription(description);\n        var msg = new MessageModel(TYPE_COMMAND_ANSWER, this.clients[0].roomId, this.messageDateToString(description), message.userId); // console.log('发送answer:' + JSON.stringify(msg))\n\n        this.wsSend(msg);\n      }).catch(() => {\n        console.log('创建answer,设置本地AndAnswer 错误');\n      });\n    },\n\n    answerHandle(message) {\n      this.clients[Number(message.userId)].peerConnection.setRemoteDescription(JSON.parse(message.message)).then(console.log('收到answer,设置远程描述完毕')); // this.$set(this.clients[Number(message.userId)], 'peerConnection', this.clients[Number(message.userId)].peerConnection)\n    },\n\n    onIceCandidate(event) {\n      console.log('onIceCandidate'); // console.log(event)\n\n      if (event.candidate === null) {\n        console.log('Candidata为null');\n        return;\n      }\n\n      var msg = new MessageModel(TYPE_COMMAND_CANDIDATE, this.clients[0].roomId, this.messageDateToString(event.candidate), event.target.userId); // console.log('发送Candidate:' + JSON.stringify(msg))\n\n      this.wsSend(msg);\n    },\n\n    candidateHandle(message) {\n      console.log('收到Candidata'); // console.log(message)\n\n      console.log(this.clients);\n      var newIceCandidata = new RTCIceCandidate(JSON.parse(message.message));\n      this.clients[Number(message.userId)].peerConnection.addIceCandidate(newIceCandidata).then(console.log('添加Candidata成功')).catch(error => {\n        console.log('添加Candidata失败:' + error);\n      });\n    },\n\n    onTrack(event) {\n      console.log('收到数据流' + event.target.userId);\n      this.clients[Number(event.target.userId)].localStream = event.streams[0];\n    },\n\n    closeView() {\n      if (this.isInRoom === false) {\n        this.$router.go(-1);\n      }\n    },\n\n    async initLocalWebsocket() {\n      console.log('初始化weosocket');\n      const response = await getUrl();\n      this.wsUrl = response.data;\n      console.log('获取到wsurl:' + this.wsUrl);\n      this.localWebsocket = new WebSocket(this.wsUrl);\n      this.localWebsocket.onmessage = this.wseReceiveMessage;\n\n      this.localWebsocket.onopen = () => {\n        console.log('localWebsocket打开');\n      };\n\n      this.localWebsocket.onerror = () => {\n        console.log('localWebsocket错误'); // 重连？\n      };\n\n      this.localWebsocket.onclose = e => {\n        console.log('localWebsocket关闭' + e);\n      };\n    },\n\n    wseReceiveMessage(e) {\n      // 数据接收\n      console.log('数据接收:');\n      console.log(e.data);\n      var str = e.data.toString().replace(/!@#/g, '');\n      const message = JSON.parse(str);\n\n      switch (message.command) {\n        case TYPE_COMMAND_SUCCESS:\n          this.successHandle(message);\n          break;\n\n        case TYPE_COMMAND_ERROR:\n          this.$message.error(message.message);\n          break;\n\n        case TYPE_COMMAND_CHAT:\n          this.receiveMsgHandle(message);\n          break;\n\n        case TYPE_COMMAND_READY:\n          this.readyHandle(message);\n          break;\n\n        case TYPE_COMMAND_OFFER:\n          message.message;\n          this.offerHandle(message);\n          break;\n\n        case TYPE_COMMAND_ANSWER:\n          this.answerHandle(message);\n          break;\n\n        case TYPE_COMMAND_CANDIDATE:\n          this.candidateHandle(message);\n          break;\n\n        case TYPE_COMMAND_VIEW:\n          this.viewHandle(message);\n          break;\n\n        case TYPE_COMMAND_MUTED:\n          this.mutedHandle(message);\n          break;\n\n        case TYPE_COMMAND_BAN:\n          this.banHandle(message);\n          break;\n\n        case TYPE_COMMAND_KICK:\n          this.kickHandle(message);\n          break;\n      }\n    },\n\n    viewHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体开启视频\n          this.isView = true;\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.view = true;\n            }\n          });\n        } else {\n          // 全体关闭视频\n          if (this.fullScreenId !== '0') {\n            this.$refs.video_full.srcObject = null;\n          }\n\n          this.isView = false;\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.view = false;\n            }\n          });\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].view = true;\n            this.clients[0].localStream.getVideoTracks()[0].enabled = true;\n          } else {\n            this.clients[0].view = false;\n            this.clients[0].localStream.getVideoTracks()[0].enabled = false;\n\n            if (this.fullScreenId === '0') {\n              this.$refs.video_full.srcObject = null;\n            }\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].view = true;\n          } else {\n            this.clients[Number(message.userId)].view = false;\n\n            if (this.fullScreenId === message.userId) {\n              this.$refs.video_full.srcObject = null;\n            }\n          }\n        }\n      }\n    },\n\n    getusers(message) {\n      console.log(message);\n    },\n\n    mutedHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体静音\n          this.isMuted = true;\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.muted = true;\n            }\n          });\n        } else {\n          // 全体取消静音\n          this.isMuted = false;\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.muted = false;\n            }\n          });\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].muted = true;\n            this.clients[0].localStream.getAudioTracks()[0].enabled = false;\n          } else {\n            this.clients[0].muted = false;\n            this.clients[0].localStream.getAudioTracks()[0].enabled = true;\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].muted = true;\n          } else {\n            this.clients[Number(message.userId)].muted = false;\n          }\n        }\n      }\n    },\n\n    banHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体禁言\n          this.isBan = true;\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.chat = false;\n            }\n          });\n        } else {\n          // 全体取消禁言\n          this.isBan = false;\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.chat = true;\n            }\n          });\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].chat = false;\n          } else {\n            this.clients[0].chat = true;\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].chat = false;\n          } else {\n            this.clients[Number(message.userId)].chat = true;\n          }\n        }\n      }\n    },\n\n    kickHandle(message) {\n      if (message.userId === this.clients[0].userId) {\n        this.$router.go(-1); // this.ch=2\n        // this.init(this.ch)\n      } else {\n        this.clients[Number(message.userId)].peerConnection.close();\n        this.clients.splice(Number(message.userId), 1); // this.ch=2\n        // this.init(this.ch)\n      }\n    },\n\n    wsSend(data) {\n      // 数据发送\n      this.localWebsocket.send(JSON.stringify(data));\n    },\n\n    messageDateToString(data) {\n      // 如果message字段是对象，就把他变成字符串，这样服务器解析不会报错\n      return '!@#' + JSON.stringify(data) + '!@#';\n    }\n\n  }\n};\n\nclass MessageModel {\n  constructor(command, roomId, message, userId, roomPw) {\n    this.command = command;\n    this.userId = userId;\n    this.roomId = roomId;\n    this.message = message;\n    this.roomPw = roomPw;\n  }\n\n}\n\nconst TYPE_COMMAND_ROOM_ENTER = 'enterRoom';\nconst TYPE_COMMAND_ROOM_CREATE = 'createRoom';\nconst TYPE_COMMAND_READY = 'ready';\nconst TYPE_COMMAND_OFFER = 'offer';\nconst TYPE_COMMAND_ANSWER = 'answer';\nconst TYPE_COMMAND_CANDIDATE = 'candidate';\nconst TYPE_COMMAND_ERROR = 'error';\nconst TYPE_COMMAND_SUCCESS = 'success';\nconst TYPE_COMMAND_CHAT = 'chat';\nconst TYPE_COMMAND_MUTED = 'MUTED';\nconst TYPE_COMMAND_VIEW = 'VIEW';\nconst TYPE_COMMAND_BAN = 'BAN';\nconst TYPE_COMMAND_KICK = 'KICK';\nconst TYPE_COMMAND_GETUSER = \"users\"; // const TYPE_COMMAND_SIGN = 'SIGN'\n\nconst iceServers = {\n  'iceServers': [{\n    url: 'stun:stun.ekiga.net'\n  }, {\n    url: 'stun:stun.ideasip.com'\n  }]\n};\nconst offerOptions = {\n  iceRestart: true,\n  offerToReceiveAudio: true,\n  offerToReceiveVideo: true\n};\nconst constraints = {\n  audio: true,\n  video: true\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6OA;AACA;AACA;AACA;AACA;AACA;EACAA,eADA;EAEAC;IAAAC;IAAAC;EAAA,CAFA;;EAGAC;IACA;MACA;QACAC;MACA,CAFA,MAEA;QACA;;QACA;UACA;QACA;;QACAA;MACA;IACA,CAVA;;IAWA;MACAC,kFADA;MAEAC,WAFA;MAGAC,SAHA;MAIAC,eAJA;MAKAC,MALA;MAMAC,cANA;MAOAC,wBAPA;MAQAC,yBARA;MASAC,gBATA;MAUAC,cAVA;MAWAC,gBAXA;MAWA;MACAC,eAZA;MAYA;MACAC,YAbA;MAaA;MACAC,eAdA;MAeAC,YAfA;MAgBAC,YAhBA;MAiBAC,cAjBA;MAkBAC,gBAlBA;MAmBAC;QACAC,WADA;QAEAC,eAFA;QAGAC,WAHA;QAIAC,sBAJA;QAKAC,yBALA;QAMAC,YANA;QAOAC,UAPA;QAQAC,UARA;QASAC,aATA;QAUAC,kBAVA;QAWAC;MAXA,EAnBA;MAgCAC;QACAV,YADA;QAEAC,UAFA;QAGAU,UAHA;QAIAC;MAJA,CAhCA;MAsCAC;QAAA5B;MAAA,CAtCA;MAwCA6B;QACAb,SACA;UAAAc;UAAAC;QAAA,CADA,CADA;QAIAhB,WACA;UAAAiB;UAAAD;QAAA,CADA,EAEA;UAAAE;UAAAC;UAAAC;UAAAJ;QAAA,CAFA;MAJA;IAxCA;EAmDA,CAlEA;;EAoEAK;IACA;IACAC;EACA,CAvEA;;EAwEA;IACA,qBADA,CAEA;;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;MACAA;MACAA;MACAA;MACAA;IACA,CALA;;IAOA;MACA;IACA,CAFA,CAEA;MACAA;MACA;MACA;IACA;EACA,CAlGA;;EAmGAC;IACA;EACA,CArGA;;EAsGAC;IACA;MACA;MACA;IACA;;IACA;MACA,4BADA,CACA;IACA;;IACA;EACA,CA/GA;;EAiHAC;IACAC;MACA;MACA;IACA,CAJA;;IAQA;IACAC;MACA;MACA;MACA;MACAC;MACA;MACA;QACA;QACA;QACA;UACA;UACAA;UACA;UACA;QACA,CARA,CASA;;;QACA,8CAVA,CAWA;;QACAC;MACA,CAbA,EAaA,EAbA,EANA,CAoBA;IACA,CA9BA;;IA+BAC;MACA;MACA,4CAFA,CAGA;;MACA,oDAJA,CAKA;;MACA;MACA;MACAF;MACA;QACA;QACA;QACA;QACA;UACAA;UACA;QACA,CAPA,CAQA;;;QACA,8CATA,CAUA;;QACAC;MACA,CAZA,EAYA,EAZA,EATA,CAsBA;IACA,CAtDA;;IAyDA;IACA;MACA;QACAP;QACA;QACA;UAAAS;UAAAC;QAAA;QACAV;QACA;UACAvB,WADA;UAEAE,WAFA;UAGAD,eAHA;UAIAE,wBAJA;UAKAC,yBALA;UAMAC,YANA;UAOAC,UAPA;UAQAC,UARA;UASAC,YATA;UAUAC,kBAVA;UAWAC;QAXA;QAaAwB;QACA;QACAX;QACAA;QACAA;MACA,CAvBA,MAuBA;QACAA;QACA;UAAAS;UAAAC;QAAA;QACAV;QACA;UACAvB,WADA;UAEAE,WAFA;UAGAD,eAHA;UAIAE,yBAJA;UAKAC,yBALA;UAMAC,YANA;UAOAC,UAPA;UAQAC,UARA;UASAC,YATA;UAUAC,kBAVA;UAWAC;QAXA;QAaA;QACAa;QACAA;QACAA;MACA;IACA,CAxGA;;IAyGAY;MACA;QACAC;MACA,CAFA;IAGA,CA7GA;;IA8GAC;MACAC;QAAAC;MAAA;QACA;MACA,CAFA,EAEAC,KAFA,CAEAC;QACAlB;MACA,CAJA;IAKA,CApHA;;IAqHA;MACA;QACAe;UAAAL;UAAAD;QAAA,GACAU,IADA,CACAC;UACA;UACApB;UACA;UACAA;QACA,CANA,EAMAiB,KANA,CAMAI;UACArB;QACA,CARA;QASA;MACA,CAXA,MAWA;QACA;QACA;QACA;UAAAS;UAAAC;QAAA;QACAV;QACA;QACA;QACAA;QACA;MACA;IACA,CA3IA;;IA4IAsB;MACAtB;;MACA;QAAA;QACA;UAAA;UACA;UACA;QACA,CAHA,MAGA;UACA;UACA;UACA;QACA;MACA,CATA,MASA;QACA;UAAA;UACA;UACA;QACA,CAHA,MAGA;UAAA;UACA;UACA;QACA;MACA;IACA,CAhKA;;IAiKAuB;MACAvB;MACA;;MACA;QACA;UACA;UACA;QACA,CAHA,MAGA;UACA;UACA;QACA;MACA,CARA,MAQA;QACA;UAAA;UACA;YACA;YACAA;YACA;YACA;UACA,CALA,MAKA;YACA;YACA;YACA;UACA;QACA,CAXA,MAWA;UAAA;UACA;YAAA;YACA;cACA;cACA;cACA;YACA,CAJA,MAIA;cACA;cACA;cACA;YACA;UACA,CAVA,MAUA;YACA;cACA;YACA,CAFA,MAEA;cACA;YACA;UACA;QACA;MACA;IACA,CA5MA;;IA6MAwB;MACAxB;;MACA;QACAA;QACA;QACA;MACA,CAJA,MAIA;QACAA;QAEA;QACA;MACA;IACA,CAzNA;;IA0NAyB;MACAzB;MACA;MACA;MACAA,kBAJA,CAMA;;MACA;MACA;QACA0B,aADA;QAEA/D,yBAFA;QAGAc;MAHA;MAMA;QACA;QACAkD;;QACA;UAEA;YACA;cAEA;YACA;UACA,CALA;QAMA;MACA,CAZA;MAaAC;MACA,qDACAT,IADA,CACAU;QACA;UACA;QACA,CAFA,MAGA;UACA;QACA;MACA,CARA,EA5BA,CAqCA;MACA;MACA;IACA,CAlQA;;IAmQAC;MACA9B;MACA;;MACA;QACA;UACA;UACA;QACA,CAHA,MAGA;UACA;UACA;QACA;MACA,CARA,MAQA;QACA;UAAA;UACA;YACA;YACA;YACA;UACA,CAJA,MAIA;YACA;YACA;YAEA;UACA;QACA,CAXA,MAWA;UAAA;UACA;YAAA;YACA;YACA;cACA;cACA;cACA;YACA,CAJA,MAIA;cACA;cACA;cACA;YACA;UACA,CAXA,MAWA;YAEA;cACA;;cACA;gBACA;cACA;YACA,CALA,MAKA;cACA;YAEA;UACA;QACA;MACA;IACA,CApTA;;IAqTA+B;MACA/B;IACA,CAvTA;;IAwTAgC;MACAhC;IACA,CA1TA;;IA2TAiC;MACAjC;;MACA;QACA;QACA;MACA;;MACA;QACA,sBADA;QAEA,2BAFA;QAGA;MAHA,GAKAmB,IALA,CAKAU;QACA;UACA;QACA,CAFA,MAGA;UACA;QACA;MACA,CAZA;MAaAK;MACA;IACA,CAhVA;;IAiVAC;MACAnC;MACA;QACAoC,sDADA;QAEAC,qBAFA,CAEA;;MAFA;IAIA,CAvVA;;IAwVAC;MAAA;MACA;QACA;UACA;;UACA;YACAJ;YACAlC;YACA;UACA,CAJA,MAIA;YACAA;YACAkC;YACA;UACA;QACA,CAXA,MAWA;UACAlC;UACA;QACA;MACA,CAhBA;IAiBA,CA1WA;;IA2WAuC;MACA;MACA;QACA;QACA;QACA;QACA;QACA;;QACA;UACAvC;UACA;QACA,CAHA,MAGA;UACAA;UACA;QACA,CAZA,CAaA;;;QACA;QACAA;QACA;QACA;MACA,CAlBA;IAmBA,CAhYA;;IAiYAwC;MAAA;MACA;QAAA;QACAxC;MAEA,CAHA,MAGA;QACAA;QACAA;QACA;QACAyC;;QACA;UACAA;QACA;;QACAA;QACAA;QACA;UACAhE,sBADA;UAEAE,sBAFA;UAGAD,yBAHA;UAIAE,sBAJA;UAKAC,iCALA;UAMAC,YANA;UAOAC,UAPA;UAQAC,UARA;UASAC,aATA;UAUA;UACAC,kBAXA;UAYAC;QAZA;QAcA;QACAa,4BAzBA,CA0BA;QACA;;QACAA;QACAA;QACAyC;UACAzC;UACAA;UACAyC;UACA,uLAJA,CAIA;;UACAzC;UACA;QACA,CAPA,EAOAiB,KAPA;MAQA;IACA,CA5aA;;IA6aAyB;MACA;MACAD;MACAzC;MACAA;;MACA;QACAyC;MACA;;MAEAA;MACAA;MACA;QACAhE,sBADA;QAEAE,sBAFA;QAGAD,wBAHA;QAIAE,sBAJA;QAKAC,iCALA;QAMAC,YANA;QAOAC,UAPA;QAQAC,UARA;QASAC,aATA;QAUAC,uCAVA;QAWAC;MAXA;MAaA;MACAa,gCAzBA,CA0BA;MACA;MACA;;MACA;MACAyC,uEACAtB,IADA,CAEAnB,yCAFA;MAIAyC,6CACAtB,IADA,CACAwB;QACA3C;QACAyC;QACA,+HAHA,CAIA;;QACA;MACA,CAPA,EAQAxB,KARA,CAQA;QACAjB;MACA,CAVA;IAYA,CA3dA;;IA4dA4C;MACA,2GACA5C,gCADA,EADA,CAIA;IACA,CAjeA;;IAkeA6C;MACA7C,8BADA,CAEA;;MACA;QACAA;QACA;MACA;;MACA,2IAPA,CAQA;;MACA;IACA,CA5eA;;IA6eA8C;MACA9C,2BADA,CAEA;;MACAA;MACA;MACA,qFACAmB,IADA,CACAnB,4BADA,EACAiB,KADA,CACAC;QACAlB;MACA,CAHA;IAIA,CAtfA;;IAufA+C;MACA/C;MACA;IACA,CA1fA;;IA2fAgD;MACA;QACA;MACA;IACA,CA/fA;;IAggBA;MACAhD;MACA;MACA;MACAA;MACA;MACA;;MACA;QACAA;MACA,CAFA;;MAGA;QACAA,gCADA,CAEA;MACA,CAHA;;MAIA;QACAA;MACA,CAFA;IAGA,CAjhBA;;IAkhBAiD;MAAA;MACAjD;MACAA;MACA;MACA;;MACA;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACAF;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;MAlCA;IAoCA,CA3jBA;;IA4jBAoD;MACA;QACA;UACA;UACA;UACA;YACA;cACAC;YACA;UACA,CAJA;QAKA,CARA,MAQA;UACA;UACA;YACA;UACA;;UACA;UACA;YACA;cACAA;YACA;UACA,CAJA;QAKA;MACA,CArBA,MAqBA;QACA;UACA;YACA;YACA;UACA,CAHA,MAGA;YACA;YACA;;YACA;cACA;YACA;UACA;QACA,CAXA,MAWA;UACA;YACA;UACA,CAFA,MAEA;YACA;;YACA;cACA;YACA;UACA;QACA;MACA;IACA,CAzmBA;;IA0mBAC;MACApD;IACA,CA5mBA;;IA8mBAqD;MACA;QACA;UACA;UACA;UACA;YACA;cACAF;YACA;UACA,CAJA;QAKA,CARA,MAQA;UACA;UACA;UACA;YACA;cACAA;YACA;UACA,CAJA;QAKA;MACA,CAlBA,MAkBA;QACA;UACA;YACA;YACA;UACA,CAHA,MAGA;YACA;YACA;UACA;QACA,CARA,MAQA;UACA;YACA;UACA,CAFA,MAEA;YACA;UACA;QACA;MACA;IACA,CAlpBA;;IAkpBAG;MACA;QACA;UACA;UACA;UACA;YACA;cACAH;YACA;UACA,CAJA;QAKA,CARA,MAQA;UACA;UACA;UACA;YACA;cACAA;YACA;UACA,CAJA;QAKA;MACA,CAlBA,MAkBA;QACA;UACA;YACA;UACA,CAFA,MAEA;YACA;UACA;QACA,CANA,MAMA;UACA;YACA;UACA,CAFA,MAEA;YACA;UACA;QACA;MACA;IACA,CAprBA;;IAorBAI;MACA;QACA,oBADA,CAEA;QACA;MACA,CAJA,MAIA;QACA;QACA,+CAFA,CAGA;QACA;MACA;IACA,CA/rBA;;IAgsBAC;MAAA;MACA;IACA,CAlsBA;;IAmsBAC;MAAA;MACA;IACA;;EArsBA;AAjHA;;AA4zBA;EACAC;IACA;IACA;IACA;IACA;IACA;EACA;;AAPA;;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,qC,CACA;;AAEA;EACA,eACA;IAAAC;EAAA,CADA,EAEA;IAAAA;EAAA,CAFA;AADA;AAMA;EACAC,gBADA;EAEAC,yBAFA;EAGAC;AAHA;AAKA;EACArD,WADA;EAEAC;AAFA","names":["name","components","Preview","Chat","data","callback","user","show","users","screenHeight","ch","meetingId","dialogFormVisible","localWebsocket","wsUrl","receiveMsg","isUserList","isPreview","isChat","isInRoom","isBan","isView","isMuted","fullScreenId","clients","userId","nickname","roomId","localStream","peerConnection","muted","view","chat","isSelf","isRoomAdmin","nowStream","roomFormData","roomPw","radio","someData","roomFromRules","validator","trigger","required","min","max","message","created","console","beforeDestroy","destroyed","methods","getScreenSize","leftSlide","clearInterval","num","rightSlide","audio","video","c0","stopV","track","addV","navigator","constraints","catch","error","then","mediaStream","e","ban","changeMicro","fullScreen","kick","id","meetinginfo","form3","res","changeView","changeData","notice","sendChat","msg","receiveMsgHandle","content","timestamp","createOrEnterRoom","successHandle","readyHandle","rtcPeerConnection","offerHandle","description","answerHandle","onIceCandidate","candidateHandle","onTrack","closeView","wseReceiveMessage","viewHandle","c","getusers","mutedHandle","banHandle","kickHandle","wsSend","messageDateToString","constructor","url","iceRestart","offerToReceiveAudio","offerToReceiveVideo"],"sourceRoot":"src/views/meeting","sources":["index.vue"],"sourcesContent":["<template>\n  <div class=\"meeting-container\" >\n\n<div  STYLE=\"display: flex; width: 100%;padding: 0 10px; flex-direction: row;flex-wrap: nowrap;justify-content: center;align-items: center;\">\n  <div v-show=\"isUserList\">\n    <el-card style=\"height: 99vh; background: whitesmoke;width: 235px;color: #333;user-select: none\">\n      <div style=\"padding-bottom: 10px; border-bottom: 1px solid #ccc;font-size: 18px\">\n        <i class=\"el-icon-bell\" style=\"padding-right: 10px;\">\n        </i>在线用户<span style=\"font-size: 18px;\"></span></div>\n      <div  class=\"box\">\n      <div style=\"padding: 10px 0;\" v-if=\"client!==undefined\"\n           v-for=\"(client) in clients\" :key=\"client.userId\" :client=\"client\"\n           :is-room-admin=\"clients[0].isRoomAdmin\">\n        <i :class='client.isRoomAdmin?\"el-icon-user-solid\":\"el-icon-user\"' style=\"margin-right: 8px; font-size: 18px; cursor: pointer\"></i>\n        <span style=\"font-size: 18px\">{{ client.nickname }}</span>\n      </div>\n      </div>\n    </el-card>\n  </div>\n\n    <div style=\"width: inherit;\">\n    <el-card style=\"padding: 10px  0; height: 99vh;background: whitesmoke;\" id=\"bar\">\n      <div style=\"height:40px;display: flex;flex-direction: column\">\n      <div>  <h1 align=\"center\" style=\"line-height: 12px;font-size: 35px\">\n        {{ this.meetingName }}</h1></div>\n      </div>\n\n      <el-container>\n\n        <el-header  height=\"196px\" style=\"user-select: none;border-radius: 5px;display: flex;\" v-if=\"isPreview\" >\n          <div @mouseenter=\"show=true\" @mouseleave=\"show=false\"  style=\"width: 100%\">\n            <div class=\"left_btn\" @click=\"leftSlide()\">\n              <button  type=\"button\" class=\"el-carousel__arrow el-carousel__arrow--left\"  v-show=\"show\" >\n                <i class=\"el-icon-arrow-left\"></i>\n              </button>\n            </div>\n            <div class=\"right_btn\"   @click=\"rightSlide()\">\n              <button  type=\"button\" class=\"el-carousel__arrow el-carousel__arrow--right\"  v-show=\"show\">\n                <i class=\"el-icon-arrow-right\"></i>\n              </button>\n            </div>\n        <div class=\"header\" ref=\"wrapperCon\" >\n        <template v-for=\"(client) in clients\">\n          <preview\n              v-if=\"client!==undefined\"\n              :key=\"client.userId\"\n              :client=\"client\"\n              :is-room-admin=\"clients[0].isRoomAdmin\"\n              @banEvent=\"ban\"\n              @microEvent=\"changeMicro\"\n              @fullEvent=\"fullScreen\"\n              @kickEvent=\"kick\"\n              @viewEvent=\"changeView\"\n              @changeStreamEvent=\"changeStream\"/>\n             </template>\n          </div></div>\n  </el-header>\n\n       <div style=\"display: flex;flex-direction: row\">\n        <el-main>\n          <div style=\"text-align: center ;width: 100%;overflow-y: hidden;min-height: 51vh;\" >\n            <video ref=\"video_full\" style=\"height:100%;user-select: none;\" muted autoplay playsinline  />\n          </div>\n\n\n          <el-footer class=\"footer\">\n           <!-- 打开视频-->\n            <div class=\"button-flex\">\n               <button class=\"btn\" @click=\"changeView(user.id)\">\n                <div class=\"button-svg\">\n                    <img class=\"img\" style=\"width: 30px;padding-top: 3px;\" v-show=\"clients[0].view\" src=\"../../imgs/02视频@2x.png\" />\n                    <img class=\"img\" style=\"width: 30px;\" v-show=\"!clients[0].view\" src=\"../../imgs/07打开摄像头@2x.png\" />\n                </div>\n                 <div>\n                   <span v-text=\"clients[0].view?'关闭视频':'打开视频'\"  STYLE=\"font-size: small;\"></span>\n                 </div>\n                </button>\n            </div>\n\n            <!--  打开语音-->\n            <div class=\"button-flex\">\n                  <button class=\"btn\" @click=\"changeMicro(user.id)\">\n                    <div class=\"button-svg\">\n                      <img class=\"img\" v-show=\"!clients[0].muted\" style=\"  width: 20px;height: 26px\" src=\"../../imgs/01语音@2x.png\"    />\n                      <img class=\"img\" v-show=\"clients[0].muted\"  style=\"  width: 23px;height: 26px\" src=\"../../imgs/06取消静音@2x.png\" />\n                    </div>\n                    <div>\n                      <span v-text=\"clients[0].muted?'打开语音':'关闭语音'\"  STYLE=\"font-size: small;\"></span>\n                    </div>\n                   </button>\n                 </div>\n\n             <!-- 切换摄像头/共享屏幕 -->\n            <div class=\"button-flex\">\n              <button class=\"btn\" @click=\"changeStream(user.id)\">\n                <div class=\"button-svg\">\n                  <img class=\"img\" v-show=\"clients[0].nowStream==='screen'\"  style=\"width: 26px;\" src=\"../../imgs/15共享屏幕.png\" />\n                  <img class=\"img\" v-show=\"clients[0].nowStream==='camera'\"  style=\"width: 26px;\" src=\"../../imgs/16摄像头.png\" />\n                </div>\n                <div>\n                  <span STYLE=\"font-size: small;\" v-text=\"clients.nowStream==='screen'?'共享屏幕':'摄像头'\"></span>\n                </div>\n              </button>\n            </div>\n\n            <!-- 隐藏侧边栏 -->\n            <div class=\"button-flex\" style=\"margin-left: 20px\">\n              <button class=\"btn\" @click=\"isUserList=!isUserList\" :style=\"{'border-top-style':isUserList?'ridge':'none'}\">\n                <div class=\"button-svg\">\n                  <img class=\"img\" style=\"width: 23px;padding-top: 2px\" src=\"../../imgs/17关闭用户列表.png\" />\n                </div>\n                <div>\n                  <span STYLE=\"font-size: small;\">参会名单</span>\n                </div>\n              </button>\n            </div>\n\n            <!-- 隐藏聊天框 -->\n            <div class=\"button-flex\">\n              <button class=\"btn\" @click=\"isChat=!isChat\" :style=\"{'border-top-style':isChat?'ridge':'none'}\">\n                <div class=\"button-svg\">\n                  <img class=\"img\"  style=\"width: 28px;\"   src=\"../../imgs/20聊天框.png\" />\n                </div>\n                <div>\n                  <span STYLE=\"font-size: small;\">聊天框</span>\n                </div>\n              </button>\n            </div>\n\n            <!-- 打开/隐藏预览框 -->\n            <div class=\"button-flex\">\n              <button class=\"btn\" @click=\"isPreview=!isPreview\" :style=\"{'border-top-style':isPreview?'ridge':'none'}\">\n                <div class=\"button-svg\">\n                  <img class=\"img\" v-show=\"isPreview\"  style=\"width: 30px;padding-top: 4px;\" src=\"../../imgs/21取消预览.png\" />\n                  <img class=\"img\" v-show=\"!isPreview\" style=\"width: 30px;padding-top: 4px;\" src=\"../../imgs/22预览.png\" />\n                </div>\n                <div>\n                  <span STYLE=\"font-size: small;\" >预览框</span>\n                </div>\n              </button>\n            </div>\n\n\n            <div class=\"button-flex\" v-if=\"clients[0].isRoomAdmin\" style=\"margin-left: 20px\">\n<!--              <div class=\"button-flex\">-->\n              <button class=\"btn\" @click=\"changeView('')\" :style=\"{'border-top-style':!isView?'ridge':'none'}\">\n                <div class=\"button-svg\">\n                  <img class=\"img\" v-show=\"isView\"  style=\"width: 26px;\" src=\"../../imgs/10全体禁视.png\" />\n                  <img class=\"img\" v-show=\"!isView\" style=\"width: 26px;\" src=\"../../imgs/09取消禁视.png\" />\n                </div>\n                <div>\n                  <span STYLE=\"font-size: small;\" v-text=\"isView?'全体禁视':'取消禁视'\"></span>\n                </div>\n              </button>\n            </div>\n              <!-- 全体禁音-->\n            <div class=\"button-flex\" v-if=\"clients[0].isRoomAdmin\">\n<!--            <div class=\"button-flex\">-->\n              <button class=\"btn\" @click=\"changeMicro('')\" :style=\"{'border-top-style':isMuted?'ridge':'none'}\">\n                <div class=\"button-svg\">\n                  <img class=\"img\" v-show=\"!isMuted\"  style=\"width: 26px;\" src=\"../../imgs/11全体禁音.png\" />\n                  <img class=\"img\" v-show=\"isMuted\" style=\"width: 26px;\" src=\"../../imgs/12取消禁音.png\" />\n                </div>\n                <div>\n                  <span STYLE=\"font-size: small;\" v-text=\"isMuted?'取消禁音':'全体禁音'\"></span>\n                </div>\n              </button>\n            </div>\n            <!-- 全体禁言 -->\n             <div class=\"button-flex\" v-if=\"clients[0].isRoomAdmin\" >\n<!--            <div class=\"button-flex\">-->\n              <button class=\"btn\" @click=\"ban('')\" :style=\"{'border-top-style':isBan?'ridge':'none'}\">\n                <div class=\"button-svg\">\n                  <img class=\"img\" v-show=\"!isBan\"  style=\"width: 27px;\" src=\"../../imgs/13全体禁言.png\" />\n                  <img class=\"img\" v-show=\"isBan\" style=\"width: 27px;\" src=\"../../imgs/14取消禁言.png\" />\n                </div>\n                <div>\n                  <span STYLE=\"font-size: small;\" v-text=\"isBan?'取消禁言':'全体禁言'\"></span>\n                </div>\n              </button>\n            </div>\n\n\n\n            <!-- 离开会议-->\n            <div style=\"align-self: center;padding-left: 70px;margin-right: 20px;\" @click=\"kick(user.id)\">\n              <el-button style=\"padding: 10px 23px;\" type=\"danger\" round>离开会议</el-button>\n            </div>\n          </el-footer>\n\n        </el-main>\n\n\n\n\n        <el-aside width=\"275px\" v-show=\"isChat\">\n          <Chat :receive-msg=\"receiveMsg\" @chatEvent=\"sendChat\"   :someData=\"someData\"  @noticeEvent=\"notice\" />\n        </el-aside>\n      </div>\n    </el-container>\n\n</el-card>\n  </div>\n</div>\n\n\n    <el-dialog title=\"请输入您的昵称和会议密码：\" :visible.sync=\"dialogFormVisible\" @close=\"closeView\" :close-on-click-modal=\"false\">\n      <el-form ref=\"roomFrom\" :model=\"roomFormData\" status-icon :rules=\"roomFromRules\" label-width=\"100px\">\n        <el-form-item label=\"昵称:\" prop=\"nickname\">\n          <el-input v-model=\"roomFormData.nickname\" maxlength=\"20\" minlength=\"1\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"房间号:\" prop=\"roomId\" >\n          <el-input v-model=\"roomFormData.roomId\" maxlength=\"10\" readonly  placeholder autocomplete=\"off\"/>\n        </el-form-item>\n        <el-form-item label=\"密码:\" prop=\"roomPw\">\n          <el-input v-model=\"roomFormData.roomPw\" type=\"password\" maxlength=\"10\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"视频来源:\" prop=\"roomPw\">\n          <el-radio v-model=\"roomFormData.radio\" label=\"1\">摄像头</el-radio>\n          <el-radio v-model=\"roomFormData.radio\" label=\"2\">电脑屏幕</el-radio>\n        </el-form-item>\n        <el-form-item>\n          <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\n\n\n          <el-button v-show=\"this.qwq!==1\" type=\"primary\" @click=\"createOrEnterRoom('enter')\">加 入</el-button>\n          <el-button  v-show=\"this.qwq===1\" type=\"primary\" @click=\"createOrEnterRoom('create')\">创 建</el-button>\n<!--          <el-button  type=\"primary\" @click=\"createOrEnterRoom('create')\">创 建</el-button>-->\n\n        </el-form-item>\n      </el-form>\n    </el-dialog>\n  </div>\n\n</template>\n\n<script>\nimport Preview from './components/Preview'\nimport Chat from './components/Chat'\nimport adapter from 'webrtc-adapter'\nimport { getUrl } from '@/api/websocketInfo'\nimport moment from \"moment\"\nexport default {\n  name: 'Meeting',\n  components: { Preview, Chat },\n  data() {\n    var valiRoomId = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入5-10位纯数字'))\n      } else {\n        var reg = /^\\d{5,10}$/\n        if (!reg.test(value)) {\n          return callback(new Error('请输入5-10位纯数字'))\n        }\n        callback()\n      }\n    }\n    return {\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      show:false,\n      users:[],\n      screenHeight: 0,\n      ch:'',\n      meetingId: '0',\n      dialogFormVisible: false,\n      localWebsocket: undefined,\n      wsUrl: undefined,\n      receiveMsg: '',\n      isUserList:true, //是否显示用户列表\n      isPreview:true, //是否显示预览框\n      isChat:true,    //是否显示聊天框\n      isInRoom: false,\n      isBan: false,\n      isView: true,\n      isMuted: false,\n      fullScreenId: '',\n      clients: [{\n        userId: '0',\n        nickname: '未连接',\n        roomId: '0',\n        localStream: undefined,\n        peerConnection: undefined,\n        muted: false,\n        view: true,\n        chat: true,\n        isSelf: false,\n        isRoomAdmin: false,\n        nowStream: 'screen'\n      }],\n      roomFormData: {\n        nickname: '',\n        roomId: '',\n        roomPw: '',\n        radio: '2'\n      },\n      someData:{meetingId:''},\n\n      roomFromRules: {\n        roomId: [\n          { validator: valiRoomId, trigger: 'blur' }\n        ],\n        nickname: [\n          {  required: true,trigger: 'blur' },\n          { min: 1, max: 20, message: '长度在 1 到 20 个字符', trigger: 'blur' }\n\n        ]\n      }\n    }\n  },\n\n  created(){\n    this.someData.meetingId=this.$route.params.meetingId\n    console.log(this.someData)\n  },\n  async mounted() {\n    this.getScreenSize();\n    // this.dialogFormVisible = true\n    this.meetingId=this.$route.params.meetingId\n    this.meetingName=this.$route.params.meetingName\n    this.roomId=this.$route.params.roomId\n    this.dialogFormVisible =false\n    this.udid=this.$route.params.udid\n    this.qwq=this.$route.params.qwq\n    this.roomFormData.nickname = this.user.nickname\n    this.roomFormData.roomId=this.roomId\n\n    this.$erd.listenTo(document.getElementById(\"bar\"), function (ele) {\n      console.log('=======offsetWidth', ele.offsetWidth)\n      console.log('=======clientWidth', ele.clientWidth)\n      console.log('=======offsetHeight', ele.offsetHeight)\n      console.log('=======offsetHeight', ele.clientHeight)\n    })\n\n    try {\n      await this.initLocalWebsocket()\n    } catch (e) {\n      console.log('websocket错误:' + e.message)\n      this.$message.error('网络连接错误!')\n      this.closeView()\n    }\n  },\n  beforeDestroy() {\n    this.$erd.uninstall(this.$refs.bar)\n  },\n  destroyed() {\n    if (this.isInRoom) {\n      const msg = new MessageModel(TYPE_COMMAND_KICK, this.roomFormData.roomId, '', this.clients[0].userId)\n      this.wsSend(msg)\n    }\n    if (this.localWebsocket !== undefined) {\n      this.localWebsocket.close() // 离开路由之后断开localWebsocket连接\n    }\n    this.stopV()\n  },\n\n  methods: {\n    getScreenSize() {\n      this.screenWidth = screen.width;\n      this.screenHeight = screen.height;\n    },\n\n\n\n    // 左箭头\n    leftSlide(){\n      // 保存滚动盒子左侧已滚动的距离\n      let left=this.$refs.wrapperCon.scrollLeft\n      let num=0\n      clearInterval(this.timer)\n      this.timer=null\n      this.timer=setInterval(()=>{\n        //   !left:已经滚动到最左侧\n        //   一次性滚动距离（可调节）\n        if(!left||num>=300){\n          // 停止滚动\n          clearInterval(this.timer)\n          this.timer=null\n          return\n        }\n        // 给滚动盒子元素赋值向左滚动距离\n        this.$refs.wrapperCon.scrollLeft=left-=30\n        // 保存向左滚动距离（方便判断一次性滚动多少距离）\n        num+=30\n      },20)\n      // 20：速度（可调节）\n    },\n    rightSlide(){\n      // 保存滚动盒子左侧已滚动的距离\n      let left=this.$refs.wrapperCon.scrollLeft\n      // 保存元素的整体宽度\n      let scrollWidth=this.$refs.wrapperCon.scrollWidth\n      // 保存元素的可见宽度\n      let clientWidth=this.$refs.wrapperCon.clientWidth\n      let num=0\n      clearInterval(this.timer)\n      this.timer=setInterval(()=>{\n        // 已经滚动距离+可见宽度\n        // left+clientWidth>=scrollWidth：滚动到最右侧\n        // num>=300一次性滚动距离\n        if(left+clientWidth>=scrollWidth||num>=300){\n          clearInterval(this.timer)\n          return\n        }\n        // 给滚动盒子元素赋值向左滚动距离\n        this.$refs.wrapperCon.scrollLeft=left+=30\n        // 保存向左滚动距离（方便判断一次性滚动多少距离）\n        num+=30\n      },20)\n      // 20：速度（可调节）\n    },\n\n\n    // 设置本地播放器\n    async startV() {\n      if (this.roomFormData.radio === '2') {\n        console.log(adapter.browserDetails.browser)\n        var mediaStream = await navigator.mediaDevices.getDisplayMedia(constraints)\n        var audioStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n        console.log('本地播放器设置')\n        const c0 = {\n          userId: '0',\n          roomId: '0',\n          nickname: '未连接',\n          localStream: mediaStream,\n          peerConnection: undefined,\n          muted: false,\n          view: true,\n          chat: true,\n          isSelf: true,\n          isRoomAdmin: false,\n          nowStream: 'screen'\n        }\n        c0.localStream.addTrack(audioStream.getAudioTracks()[0])\n        this.$set(this.clients, 0, c0)\n        console.log('本地流')\n        console.log(this.clients[0].localStream)\n        console.log('本地播放器设置成功')\n      } else {\n        console.log(adapter.browserDetails.browser)\n        var audioStream1 = await navigator.mediaDevices.getUserMedia({ audio: true, video: true })\n        console.log('摄像头设置')\n        const c01 = {\n          userId: '0',\n          roomId: '0',\n          nickname: '未连接',\n          localStream: audioStream1,\n          peerConnection: undefined,\n          muted: false,\n          view: true,\n          chat: true,\n          isSelf: true,\n          isRoomAdmin: false,\n          nowStream: 'camera'\n        }\n        this.$set(this.clients, 0, c01)\n        console.log('本地流')\n        console.log(this.clients[0].localStream)\n        console.log('本地摄像头设置成功')\n      }\n    },\n    stopV() {\n      this.clients[0].localStream.getTracks().forEach(function(track) {\n        track.stop()\n      })\n    },\n    addV() {\n      navigator.mediaDevices.getDisplayMedia({ constraints }).then(stream => {\n        this.clients[0].localStream = stream\n      }).catch(error => {\n        console.log(error)\n      })\n    },\n    async changeStream(userId) {\n      if (this.clients[0].nowStream === 'screen') {\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n            .then((mediaStream) => {\n              this.stopV()\n              console.log('切换为摄像头')\n              this.clients[0].localStream = mediaStream\n              console.log('本地摄像头设置成功')\n            }).catch((e) => {\n          console.log('本地摄像头设置失败 ' + e.message)\n        })\n        this.clients[0].nowStream = 'camera'\n      } else {\n        this.stopV()\n        var mediaStream = await navigator.mediaDevices.getDisplayMedia(constraints)\n        var audioStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n        console.log('切换为屏幕')\n        this.clients[0].localStream = mediaStream\n        this.clients[0].localStream.addTrack(audioStream.getAudioTracks()[0])\n        console.log('本地播放器设置成功')\n        this.clients[0].nowStream = 'screen'\n      }\n    },\n    ban(userId) {\n      console.log('ban:' + userId)\n      if (userId === '') { // 全体禁言\n        if (this.isBan) { // 恢复\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFormData.roomId, 'false', '')\n          this.wsSend(msg)\n        } else {\n          // 全体禁言\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFormData.roomId, 'true', '')\n          this.wsSend(msg)\n        }\n      } else {\n        if (this.clients[userId].chat) { // 全员发送chat关闭\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFormData.roomId, 'true', userId)\n          this.wsSend(msg)\n        } else { // 全员发送chat开启\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFormData.roomId, 'false', userId)\n          this.wsSend(msg)\n        }\n      }\n    },\n    changeMicro(userId) {\n      console.log('changeMicro:' + userId)\n      const uid = userId.toString();\n      if (userId === '') {\n        if (this.isMuted) {\n          const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'false', '')\n          this.wsSend(msg)\n        } else {\n          const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'true', '')\n          this.wsSend(msg)\n        }\n      } else {\n        if (uid === this.clients[0].userId) { // 自己开关麦克风，通知所有人\n          if (this.clients[0].muted) {\n            // 打开麦克风\n            console.log()\n            const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'false', this.clients[0].userId)\n            this.wsSend(msg)\n          } else {\n            // 关闭麦克风\n            const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'true', this.clients[0].userId)\n            this.wsSend(msg)\n          }\n        } else { // 别人\n          if (this.clients[0].isRoomAdmin) { // 自己是管理员，就要彻底开关他的麦克风\n            if (this.clients[Number(userId)].muted) {\n              // 通知所有人打开此人麦克风\n              const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'false', userId)\n              this.wsSend(msg)\n            } else {\n              // 通知所有人关闭此人麦克风\n              const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFormData.roomId, 'true', userId)\n              this.wsSend(msg)\n            }\n          } else {\n            if (this.clients[Number(userId)].muted) {\n              this.clients[Number(userId)].muted = false\n            } else {\n              this.clients[Number(userId)].muted = true\n            }\n          }\n        }\n      }\n    },\n    fullScreen(userId) {\n      console.log('fullScreen:' + userId)\n      if (userId === this.clients[0].userId) {\n        console.log(this.clients[0].localStream)\n        this.$refs.video_full.srcObject = this.clients[0].localStream\n        this.fullScreenId = '0'\n      } else {\n        console.log(this.clients[userId].localStream)\n\n        this.$refs.video_full.srcObject = this.clients[userId].localStream\n        this.fullScreenId = userId\n      }\n    },\n    kick(userId) {\n      console.log('kick:' + userId)\n      const msg = new MessageModel(TYPE_COMMAND_KICK, this.roomFormData.roomId, '', userId)\n      this.wsSend(msg)\n      console.log(\"踢出\")\n\n      //签退\n      let t1=moment().startOf('millisecond').format(\"YYYY-MM-DD HH:mm:ss\")\n      const form3= {\n        id:this.udid,\n        meetingId:this.meetingId,\n        userId:userId,\n      }\n\n      this.request.get(\"/meeting/MyMeeting/\"+this.meetingId).then(res => {\n        const meetinginfo=res.data\n        meetinginfo.stage=2\n       if (meetinginfo.createUser===userId){\n\n         this.request.post(\"/meeting/MyMeeting\",meetinginfo).then(res => {\n           if (res.code === '200') {\n\n             this.$message.success(\"已结束会议!\")\n           }\n         })\n       }\n      })\n      form3.signOutDate=JSON.parse(JSON.stringify(t1))\n      this.request.post(\"/AboutMeeting/manualSign\",form3)\n          .then(res => {\n            if (res.code === '200') {\n              this.$message.success(\"签退成功\")\n            }\n            else {\n              this.$message.success(\"签退失败，请联系会议申请人员\")\n            }\n          })\n      //踢出去\n      // this.ch=2\n      // this.init(this.ch)\n    },\n    changeView(userId) {\n      console.log(this.clients)\n      const uid = userId.toString();\n      if (userId === '') {\n        if (this.isView) {\n          const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'false', '')\n          this.wsSend(msg)\n        } else {\n          const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'true', '')\n          this.wsSend(msg)\n        }\n      } else {\n        if (uid === this.clients[0].userId) { // 自己开关视频，通知所有人\n          if (this.clients[0].view) {\n            // 打开视频\n            const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'false', this.clients[0].userId)\n            this.wsSend(msg)\n          } else {\n            // 关闭视频\n            const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'true', this.clients[0].userId)\n\n            this.wsSend(msg)\n          }\n        } else { // 别人\n          if (this.clients[0].isRoomAdmin) { // 自己是管理员，就要彻底开关他的视频\n            // console.log(\"0.0\")\n            if (this.clients[Number(userId)].view) {\n              // 通知所有人打开此人视频\n              const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'false', userId)\n              this.wsSend(msg)\n            } else {\n              // 通知所有人关闭此人视频\n              const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFormData.roomId, 'true', userId)\n              this.wsSend(msg)\n            }\n          } else {\n\n            if (this.clients[Number(userId)].view) {\n              this.clients[Number(userId)].view = false\n              if (this.fullScreenId !== '0') {\n                this.$refs.video_full.srcObject = null\n              }\n            } else {\n              this.clients[Number(userId)].view = true\n\n            }\n          }\n        }\n      }\n    },\n    changeData(){\n      console.log('子组件给我传递了一个方法');\n    },\n    notice(msg) {\n      console.log('notice:' + msg)\n    },\n    sendChat(msg) {\n      console.log('sendChat:' + msg)\n      if (!this.clients[0].chat) {\n        this.$message.error('已被禁言...')\n        return\n      }\n      this.request.post(\"/message\",{\n        \"userId\": this.user.id,\n        \"meetingId\": this.meetingId,\n        \"content\":msg\n      })\n          .then(res => {\n            if (res.code === '200') {\n              this.$message.success(\"发送成功\")\n            }\n            else {\n              this.$message.success(\"发送失败！\")\n            }\n          })\n      msg = new MessageModel(TYPE_COMMAND_CHAT, this.roomFormData.nickname,  msg  ,this.user.id,this.user.avatar)\n      this.wsSend(msg)\n    },\n    receiveMsgHandle(message) {\n      console.log(message)\n      this.receiveMsg = {\n        content: message.roomId + ':' + message.message + '\\n',\n        timestamp: Date.now() // 或者使用一个计数器\n      }\n    },\n    createOrEnterRoom(method) { // 进入房间\n      this.$refs.roomFrom.validate((valid) => {\n        if (valid) {\n          var msg\n          if (method === 'create') {\n            msg = new MessageModel(TYPE_COMMAND_ROOM_CREATE, this.roomFormData.roomId, this.roomFormData.nickname, this.user.id, this.roomFormData.roomPw )\n            console.log('创建房间:' + JSON.stringify(msg))\n            this.wsSend(msg)\n          } else {\n            console.log('加入房间:' + this.roomFormData.roomId)\n            msg = new MessageModel(TYPE_COMMAND_ROOM_ENTER, this.roomFormData.roomId, this.roomFormData.nickname, this.user.id, this.roomFormData.roomPw)\n            this.wsSend(msg)\n          }\n        } else {\n          console.log('表单验证错误')\n          return false\n        }\n      })\n    },\n    successHandle(message) {\n      // store.dispatch('user/setNickname', this.roomFormData.nickname)\n      this.startV().then(() => {\n        this.isInRoom = true\n        this.dialogFormVisible = false\n        this.clients[0].userId = message.userId\n        this.clients[0].roomId = message.roomId\n        this.clients[0].nickname = this.roomFormData.nickname\n        if (message.message === 'create') {\n          console.log('创建房间成功')\n          this.clients[0].isRoomAdmin = true\n        } else {\n          console.log('进入房间成功')\n          this.clients[0].isRoomAdmin = false\n        }\n        // 广播 自己准备好了,其他用户收到后就会创建连接\n        var msg = new MessageModel(TYPE_COMMAND_READY, this.roomFormData.roomId, this.roomFormData.nickname, message.userId, '', this.clients[0].isRoomAdmin)\n        console.log('发送准备完毕广播' + msg)\n        this.wsSend(msg)\n        this.$message.success('成功!')\n      })\n    },\n    readyHandle(message) { // 收到上线的用户准备好信号，创建RTCPeerConnectio准备与他连接并发送offer\n      if (this.clients[0].userId === message.userId) { // 是自己准备好了\n        console.log(\"=======NO+======\"+message)\n\n      } else {\n        console.log(\"我准备好了\")\n        console.log(message)\n        var rtcPeerConnection = new RTCPeerConnection(iceServers)\n        rtcPeerConnection.userId = message.userId\n        for (const track of this.clients[0].localStream.getTracks()) {\n          rtcPeerConnection.addTrack(track, this.clients[0].localStream)\n        }\n        rtcPeerConnection.ontrack = this.onTrack\n        rtcPeerConnection.onicecandidate = this.onIceCandidate\n        const remoteClient = {\n          userId: message.userId,\n          roomId: message.roomId,\n          nickname: message.message,\n          localStream: undefined,\n          peerConnection: rtcPeerConnection,\n          muted: false,\n          view: true,\n          chat: true,\n          isSelf: false,\n          // isRoomAdmin: JSON.parse(message.userId),\n          isRoomAdmin:false,\n          nowStream: 'screen'\n        }\n        this.$set(this.clients, Number(message.userId), remoteClient)\n        console.log('准备完毕,添加了一个连接')\n        // this.ch=1\n        // this.init(this.ch)\n        console.log(this.clients)\n        console.log('创建offer')\n        rtcPeerConnection.createOffer(offerOptions).then((description) => {\n          console.log('创建offer,设置本地Description')\n          console.log(description)\n          rtcPeerConnection.setLocalDescription(description)\n          var msg = new MessageModel(TYPE_COMMAND_OFFER, this.clients[0].roomId, this.messageDateToString(description), message.userId, this.roomFormData.nickname, this.clients[0].isRoomAdmin) // 字段不够用,把名字临时放在roomPw字段\n          console.log('发送offer')\n          this.wsSend(msg)\n        }).catch()\n      }\n    },\n    offerHandle(message) {\n      var rtcPeerConnection = new RTCPeerConnection(iceServers)\n      rtcPeerConnection.userId = message.userId\n      console.log('本地流')\n      console.log(this.clients[0].localStream)\n      for (const track of this.clients[0].localStream.getTracks()) {\n        rtcPeerConnection.addTrack(track, this.clients[0].localStream)\n      }\n\n      rtcPeerConnection.ontrack = this.onTrack\n      rtcPeerConnection.onicecandidate = this.onIceCandidate\n      const remoteClient = {\n        userId: message.userId,\n        roomId: message.roomId,\n        nickname: message.roomPw,\n        localStream: undefined,\n        peerConnection: rtcPeerConnection,\n        muted: false,\n        view: true,\n        chat: true,\n        isSelf: false,\n        isRoomAdmin: JSON.parse(message.userId),\n        nowStream: 'screen'\n      }\n      this.$set(this.clients, Number(message.userId), remoteClient)\n      console.log('接受到offer,添加了一个连接')\n      // this.ch=1\n      // this.init(this.ch)\n      // console.log(this.clients)\n      var sdp = JSON.parse(message.message)\n      rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(sdp))\n          .then(\n              console.log('收到offer,设置远程Description 完毕')\n          )\n      rtcPeerConnection.createAnswer(offerOptions)\n          .then((description) => {\n            console.log('创建answer,设置本地Description')\n            rtcPeerConnection.setLocalDescription(description)\n            var msg = new MessageModel(TYPE_COMMAND_ANSWER, this.clients[0].roomId, this.messageDateToString(description), message.userId)\n            // console.log('发送answer:' + JSON.stringify(msg))\n            this.wsSend(msg)\n          })\n          .catch(() => {\n                console.log('创建answer,设置本地AndAnswer 错误')\n              }\n          )\n    },\n    answerHandle(message) {\n      this.clients[Number(message.userId)].peerConnection.setRemoteDescription(JSON.parse(message.message)).then(\n          console.log('收到answer,设置远程描述完毕')\n      )\n      // this.$set(this.clients[Number(message.userId)], 'peerConnection', this.clients[Number(message.userId)].peerConnection)\n    },\n    onIceCandidate(event) {\n      console.log('onIceCandidate')\n      // console.log(event)\n      if (event.candidate === null) {\n        console.log('Candidata为null')\n        return\n      }\n      var msg = new MessageModel(TYPE_COMMAND_CANDIDATE, this.clients[0].roomId, this.messageDateToString(event.candidate), event.target.userId)\n      // console.log('发送Candidate:' + JSON.stringify(msg))\n      this.wsSend(msg)\n    },\n    candidateHandle(message) {\n      console.log('收到Candidata')\n      // console.log(message)\n      console.log(this.clients)\n      var newIceCandidata = new RTCIceCandidate(JSON.parse(message.message))\n      this.clients[Number(message.userId)].peerConnection.addIceCandidate(newIceCandidata)\n          .then(console.log('添加Candidata成功')).catch((error) => {\n        console.log('添加Candidata失败:' + error)\n      })\n    },\n    onTrack(event) {\n      console.log('收到数据流' + event.target.userId)\n      this.clients[Number(event.target.userId)].localStream = event.streams[0]\n    },\n    closeView() {\n      if (this.isInRoom === false) {\n        this.$router.go(-1)\n      }\n    },\n    async initLocalWebsocket() {\n      console.log('初始化weosocket')\n      const response = await getUrl()\n      this.wsUrl = response.data\n      console.log('获取到wsurl:' + this.wsUrl)\n      this.localWebsocket = new WebSocket(this.wsUrl)\n      this.localWebsocket.onmessage = this.wseReceiveMessage\n      this.localWebsocket.onopen = () => {\n        console.log('localWebsocket打开')\n      }\n      this.localWebsocket.onerror = () => {\n        console.log('localWebsocket错误')\n        // 重连？\n      }\n      this.localWebsocket.onclose = (e) => {\n        console.log('localWebsocket关闭' + e)\n      }\n    },\n    wseReceiveMessage(e) { // 数据接收\n      console.log('数据接收:')\n      console.log(e.data)\n      var str = e.data.toString().replace(/!@#/g, '')\n      const message = JSON.parse(str)\n      switch (message.command) {\n        case TYPE_COMMAND_SUCCESS:\n          this.successHandle(message)\n          break\n        case TYPE_COMMAND_ERROR:\n          this.$message.error(message.message)\n          break\n        case TYPE_COMMAND_CHAT:\n          this.receiveMsgHandle(message)\n          break\n        case TYPE_COMMAND_READY:\n          this.readyHandle(message)\n          break\n        case TYPE_COMMAND_OFFER:\n          message.message\n          this.offerHandle(message)\n          break\n        case TYPE_COMMAND_ANSWER:\n          this.answerHandle(message)\n          break\n        case TYPE_COMMAND_CANDIDATE:\n          this.candidateHandle(message)\n          break\n        case TYPE_COMMAND_VIEW:\n          this.viewHandle(message)\n          break\n        case TYPE_COMMAND_MUTED:\n          this.mutedHandle(message)\n          break\n        case TYPE_COMMAND_BAN:\n          this.banHandle(message)\n          break\n        case TYPE_COMMAND_KICK:\n          this.kickHandle(message)\n          break\n      }\n    },\n    viewHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体开启视频\n          this.isView = true\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.view = true\n            }\n          })\n        } else {\n          // 全体关闭视频\n          if (this.fullScreenId !== '0') {\n            this.$refs.video_full.srcObject = null\n          }\n          this.isView = false\n          this.clients.forEach(c => {\n            if (c !== undefined ) {\n              c.view = false\n            }\n          })\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].view = true\n            this.clients[0].localStream.getVideoTracks()[0].enabled = true\n          } else {\n            this.clients[0].view = false\n            this.clients[0].localStream.getVideoTracks()[0].enabled = false\n            if (this.fullScreenId === '0') {\n              this.$refs.video_full.srcObject = null\n            }\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].view = true\n          } else {\n            this.clients[Number(message.userId)].view = false\n            if (this.fullScreenId === message.userId) {\n              this.$refs.video_full.srcObject = null\n            }\n          }\n        }\n      }\n    },\n    getusers(message){\n      console.log(message)\n    },\n\n    mutedHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体静音\n          this.isMuted = true\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.muted = true\n            }\n          })\n        } else {\n          // 全体取消静音\n          this.isMuted = false\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.muted = false\n            }\n          })\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].muted = true\n            this.clients[0].localStream.getAudioTracks()[0].enabled = false\n          } else {\n            this.clients[0].muted = false\n            this.clients[0].localStream.getAudioTracks()[0].enabled = true\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].muted = true\n          } else {\n            this.clients[Number(message.userId)].muted = false\n          }\n        }\n      }\n    }, banHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体禁言\n          this.isBan = true\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.chat = false\n            }\n          })\n        } else {\n          // 全体取消禁言\n          this.isBan = false\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.chat = true\n            }\n          })\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].chat = false\n          } else {\n            this.clients[0].chat = true\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].chat = false\n          } else {\n            this.clients[Number(message.userId)].chat = true\n          }\n        }\n      }\n    }, kickHandle(message) {\n      if (message.userId === this.clients[0].userId) {\n        this.$router.go(-1)\n        // this.ch=2\n        // this.init(this.ch)\n      } else {\n        this.clients[Number(message.userId)].peerConnection.close()\n        this.clients.splice(Number(message.userId), 1)\n        // this.ch=2\n        // this.init(this.ch)\n      }\n    },\n    wsSend(data) { // 数据发送\n      this.localWebsocket.send(JSON.stringify(data))\n    },\n    messageDateToString(data) { // 如果message字段是对象，就把他变成字符串，这样服务器解析不会报错\n      return '!@#' + JSON.stringify(data) + '!@#'\n    }\n\n  }\n\n}\n\nclass MessageModel {\n  constructor(command, roomId, message, userId, roomPw) {\n    this.command = command\n    this.userId = userId\n    this.roomId = roomId\n    this.message = message\n    this.roomPw = roomPw\n  }\n}\n\nconst TYPE_COMMAND_ROOM_ENTER = 'enterRoom'\nconst TYPE_COMMAND_ROOM_CREATE = 'createRoom'\nconst TYPE_COMMAND_READY = 'ready'\nconst TYPE_COMMAND_OFFER = 'offer'\nconst TYPE_COMMAND_ANSWER = 'answer'\nconst TYPE_COMMAND_CANDIDATE = 'candidate'\n\nconst TYPE_COMMAND_ERROR = 'error'\nconst TYPE_COMMAND_SUCCESS = 'success'\nconst TYPE_COMMAND_CHAT = 'chat'\n\nconst TYPE_COMMAND_MUTED = 'MUTED'\nconst TYPE_COMMAND_VIEW = 'VIEW'\nconst TYPE_COMMAND_BAN = 'BAN'\nconst TYPE_COMMAND_KICK = 'KICK'\nconst TYPE_COMMAND_GETUSER = \"users\"\n// const TYPE_COMMAND_SIGN = 'SIGN'\n\nconst iceServers = {\n  'iceServers': [\n    { url: 'stun:stun.ekiga.net' },\n    { url: 'stun:stun.ideasip.com' }\n  ]\n}\nconst offerOptions = {\n  iceRestart: true,\n  offerToReceiveAudio: true,\n  offerToReceiveVideo: true\n}\nconst constraints = {\n  audio: true,\n  video: true\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.box{\n  /*定义滚动条宽高及背景，宽高分别对应横竖滚动条的尺寸*/\n  // 滚动条整体部分\n  &::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n  }\n  // 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。\n  &::-webkit-scrollbar-button {\n    display: none;\n  }\n  // 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）\n  &::-webkit-scrollbar-thumb {\n    background: rgba(144, 147, 153, 0.3);\n    cursor: pointer;\n    border-radius: 4px;\n  }\n  // 边角，即两个滚动条的交汇处\n  &::-webkit-scrollbar-corner {\n    display: none;\n  }\n  // 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件\n  &::-webkit-resizer {\n    display: none;\n  }\n\n}\n.box:hover{\n  height: 110vh;\n  overflow-y: auto;\n  /*定义滚动条宽高及背景，宽高分别对应横竖滚动条的尺寸*/\n  // 滚动条整体部分\n  &::-webkit-scrollbar {\n    width: 6px;\n    height: 6px;\n  }\n  // 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。\n  &::-webkit-scrollbar-button {\n    display: none;\n  }\n  // 滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）\n  &::-webkit-scrollbar-thumb {\n    background: rgba(144, 147, 153, 0.3);\n    cursor: pointer;\n    border-radius: 4px;\n  }\n  // 边角，即两个滚动条的交汇处\n  &::-webkit-scrollbar-corner {\n    display: none;\n  }\n  // 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件\n  &::-webkit-resizer {\n    display: none;\n  }\n\n\n}\n\n.meeting-container{\n  height: 95%;\n  border-radius: 15px;\n  box-sizing: border-box;\n  padding-top: 5px;\n  justify-content: center;\n  align-items: center;\n  margin: 0;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-content: center;\n}\n\n.el-header {\n  background-color: #B3C0D1;\n  padding: 0;\n  margin: 0;\n  //overflow-x: scroll;\n  //overflow-y: hidden;\n  white-space: nowrap;\n}\n\n.el-aside {\n  background-color: #D3DCE6;\n  margin: 0;\n  padding: 8px 10px 15px;\n  border-radius: 10px;\n}\n\n.el-main {\n  background-color: #F5F5F5;\n  overflow-x: hidden;\n\n  padding: 0;\n}\n\n.el-container {\n}\n.el-divider--horizontal {\n  display: block;\n  height: 1px;\n  width: 100%;\n  margin: -20px 0;\n  background: #616161;\n}\n.btn{\n  background: #E3E3E3;\n  border-radius: 10px;\n  width: 55px;\n  height: 60px;\n  border: none;\n}\n.btn:hover {\n  color: #000000;\n  -webkit-transform: translateY(-1px);\n  transform: translateY(1px);\n  box-shadow: 0 7px 14px rgb(50 50 93 / 10%), 0 3px 6px rgb(0 0 0 / 8%);\n}\n.left_btn{\n  position: relative;\n  font-size: 30px;\n  cursor: pointer;\n  top: 95px;\n}\n.right_btn {\n  position: relative;\n  font-size: 30px;\n  cursor: pointer;\n  top: 95px;\n}\n\n.el-carousel__arrow{\n  border:none;\n  outline:0;\n  padding:0;\n  margin:0;\n  height:40px;\n  width:40px;\n  -webkit-transition:.3s;\n  transition:.3s;\n  border-radius:50%;\n  background-color:rgba(31,45,61,.11);\n  color:#FFF;\n  z-index:10;\n  -webkit-transform:translateY(-50%);\n  transform:translateY(-50%);\n  text-align:center;\n  font-size:12px}\n.el-carousel__arrow--left{\n  left:16px\n}\n.el-carousel__arrow--right{\n  right:16px\n}\n.el-carousel__arrow:hover{\n  background-color:rgba(31,45,61,.23)\n}\n.el-carousel__arrow i{\n}\n.header{\n  overflow-x: hidden;\n  overflow-y: hidden;\n}\n/*隐藏滚动条*/\n .header .scroll_wrapper::-webkit-scrollbar {\n  display: none;\n}\n .footer{\n   padding: 0 20px;\n   user-select: none;\n   height: 60px;\n   display: flex;\n   flex-direction: row;\n   flex-wrap:nowrap;\n   justify-content: space-between;\n   overflow: hidden;\n   //align-items: baseline;\n }\n .button-flex{\n   display: flex;\n   flex-direction: column;\n }\n .button-svg{\n   height: 30px;\n }\n</style>\n"]},"metadata":{},"sourceType":"module"}