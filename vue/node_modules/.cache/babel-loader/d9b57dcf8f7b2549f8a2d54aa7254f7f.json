{"ast":null,"code":"import _createClass from \"C:/Users/86134/Desktop/\\u7231\\u8BFB\\u4E66/springboot-vue/vue/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/86134/Desktop/\\u7231\\u8BFB\\u4E66/springboot-vue/vue/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createForOfIteratorHelper from \"C:/Users/86134/Desktop/\\u7231\\u8BFB\\u4E66/springboot-vue/vue/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Users/86134/Desktop/\\u7231\\u8BFB\\u4E66/springboot-vue/vue/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.splice.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Preview from './components/Preview';\nimport Chat from './components/Chat';\nimport adapter from 'webrtc-adapter';\nimport { getUrl } from '@/api/websocketInfo';\nimport { mapGetters } from 'vuex';\nimport store from '@/store';\nexport default {\n  name: 'Meeting',\n  components: {\n    Preview: Preview,\n    Chat: Chat\n  },\n  data: function data() {\n    var valiRoomId = function valiRoomId(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请输入5-10位纯数字'));\n      } else {\n        var reg = /^\\d{5,10}$/;\n\n        if (!reg.test(value)) {\n          return callback(new Error('请输入5-10位纯数字'));\n        }\n\n        callback();\n      }\n    };\n\n    return {\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      users: [],\n      ch: '',\n      meetingId: '0',\n      dialogFormVisible: false,\n      localWebsocket: undefined,\n      wsUrl: undefined,\n      receiveMsg: '',\n      isInRoom: false,\n      isBan: false,\n      isView: true,\n      isMuted: false,\n      fullScreenId: '',\n      clients: [{\n        userId: '0',\n        nickname: '未连接',\n        roomId: '0',\n        localStream: undefined,\n        peerConnection: undefined,\n        muted: false,\n        view: true,\n        chat: true,\n        isSelf: false,\n        isRoomAdmin: false,\n        nowStream: 'screen'\n      }],\n      roomFromDate: {\n        nickname: '',\n        roomId: '',\n        roomPw: '',\n        radio: '2'\n      },\n      roomFromRules: {\n        roomId: [{\n          validator: valiRoomId,\n          trigger: 'blur'\n        }],\n        roomPw: [{\n          validator: valiRoomId,\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.dialogFormVisible = true;\n              _this.roomFromDate.nickname = _this.user.nickname;\n              _context.prev = 2;\n              _context.next = 5;\n              return _this.initLocalWebsocket();\n\n            case 5:\n              _context.next = 12;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](2);\n              console.log('websocket错误:' + _context.t0.message);\n\n              _this.$message.error('网络连接错误!');\n\n              _this.closeView();\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 7]]);\n    }))();\n  },\n  beforeDestroy: function beforeDestroy() {\n    console.log('即将销毁');\n  },\n  destroyed: function destroyed() {\n    if (this.isInRoom) {\n      var msg = new MessageModel(TYPE_COMMAND_KICK, this.roomFromDate.roomId, '', this.clients[0].userId);\n      this.ch = 2;\n      this.init(this.ch);\n      this.wsSend(msg);\n    }\n\n    if (this.localWebsocket !== undefined) {\n      this.localWebsocket.close(); // 离开路由之后断开localWebsocket连接\n    }\n\n    this.stopV();\n  },\n  methods: {\n    // 设置本地播放器\n    startV: function startV() {\n      var _this2 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var mediaStream, audioStream, c0, audioStream1, c01;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(_this2.roomFromDate.radio === '2')) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                console.log(adapter.browserDetails.browser);\n                _context2.next = 4;\n                return navigator.mediaDevices.getDisplayMedia(constraints);\n\n              case 4:\n                mediaStream = _context2.sent;\n                _context2.next = 7;\n                return navigator.mediaDevices.getUserMedia({\n                  audio: true,\n                  video: false\n                });\n\n              case 7:\n                audioStream = _context2.sent;\n                console.log('本地播放器设置');\n                c0 = {\n                  userId: '0',\n                  roomId: '0',\n                  nickname: '未连接',\n                  localStream: mediaStream,\n                  peerConnection: undefined,\n                  muted: false,\n                  view: true,\n                  chat: true,\n                  isSelf: true,\n                  isRoomAdmin: false,\n                  nowStream: 'screen'\n                };\n                c0.localStream.addTrack(audioStream.getAudioTracks()[0]);\n\n                _this2.$set(_this2.clients, 0, c0);\n\n                console.log('本地流');\n                console.log(_this2.clients[0].localStream);\n                console.log('本地播放器设置成功');\n                _context2.next = 27;\n                break;\n\n              case 17:\n                console.log(adapter.browserDetails.browser);\n                _context2.next = 20;\n                return navigator.mediaDevices.getUserMedia({\n                  audio: true,\n                  video: true\n                });\n\n              case 20:\n                audioStream1 = _context2.sent;\n                console.log('摄像头设置');\n                c01 = {\n                  userId: '0',\n                  roomId: '0',\n                  nickname: '未连接',\n                  localStream: audioStream1,\n                  peerConnection: undefined,\n                  muted: false,\n                  view: true,\n                  chat: true,\n                  isSelf: true,\n                  isRoomAdmin: false,\n                  nowStream: 'screen'\n                };\n\n                _this2.$set(_this2.clients, 0, c01);\n\n                console.log('本地流');\n                console.log(_this2.clients[0].localStream);\n                console.log('本地摄像头设置成功');\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    init: function init(ch) {\n      var _this3 = this;\n\n      if (ch === 1) {\n        this.clients.forEach(function (c) {\n          if (c !== undefined) {\n            _this3.users.push(c.nickname);\n\n            var map = new Map();\n\n            var qc = _this3.users.filter(function (key) {\n              return !map.has(key) && map.set(key, 1);\n            });\n\n            _this3.users = qc;\n            console.log(_this3.users);\n          }\n        });\n      }\n\n      if (ch === 2) {\n        this.users.length = 0;\n        this.clients.forEach(function (c) {\n          if (c !== undefined) {\n            _this3.users.push(c.nickname);\n\n            console.log(_this3.users);\n            var map1 = new Map();\n\n            var qc = _this3.users.filter(function (key) {\n              return !map1.has(key) && map1.set(key, 1);\n            });\n\n            _this3.users = qc;\n          }\n        });\n      }\n    },\n    stopV: function stopV() {\n      this.clients[0].localStream.getTracks().forEach(function (track) {\n        track.stop();\n      });\n    },\n    addV: function addV() {\n      var _this4 = this;\n\n      navigator.mediaDevices.getDisplayMedia({\n        constraints: constraints\n      }).then(function (stream) {\n        _this4.clients[0].localStream = stream;\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    changeStream: function changeStream(userId) {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var mediaStream, audioStream;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(_this5.clients[0].nowStream === 'screen')) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                navigator.mediaDevices.getUserMedia({\n                  video: true,\n                  audio: true\n                }).then(function (mediaStream) {\n                  _this5.stopV();\n\n                  console.log('切换为摄像头');\n                  _this5.clients[0].localStream = mediaStream;\n                  console.log('本地摄像头设置成功');\n                }).catch(function (e) {\n                  console.log('本地摄像头设置失败 ' + e.message);\n                });\n                _this5.clients[0].nowStream = 'camera';\n                _context3.next = 17;\n                break;\n\n              case 5:\n                _this5.stopV();\n\n                _context3.next = 8;\n                return navigator.mediaDevices.getDisplayMedia(constraints);\n\n              case 8:\n                mediaStream = _context3.sent;\n                _context3.next = 11;\n                return navigator.mediaDevices.getUserMedia({\n                  audio: true,\n                  video: false\n                });\n\n              case 11:\n                audioStream = _context3.sent;\n                console.log('切换为屏幕');\n                _this5.clients[0].localStream = mediaStream;\n\n                _this5.clients[0].localStream.addTrack(audioStream.getAudioTracks()[0]);\n\n                console.log('本地播放器设置成功');\n                _this5.clients[0].nowStream = 'screen';\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    },\n    ban: function ban(userId) {\n      console.log('ban:' + userId);\n\n      if (userId === '') {\n        // 全体禁言\n        if (this.isBan) {\n          // 恢复\n          var msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFromDate.roomId, 'false', '');\n          this.wsSend(msg);\n        } else {\n          // 全体禁言\n          var _msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFromDate.roomId, 'true', '');\n\n          this.wsSend(_msg);\n        }\n      } else {\n        if (this.clients[userId].chat) {\n          // 全员发送chat关闭\n          var _msg2 = new MessageModel(TYPE_COMMAND_BAN, this.roomFromDate.roomId, 'true', userId);\n\n          this.wsSend(_msg2);\n        } else {\n          // 全员发送chat开启\n          var _msg3 = new MessageModel(TYPE_COMMAND_BAN, this.roomFromDate.roomId, 'false', userId);\n\n          this.wsSend(_msg3);\n        }\n      }\n    },\n    changeMicro: function changeMicro(userId) {\n      console.log('changeMicro:' + userId);\n\n      if (userId === '') {\n        if (this.isMuted) {\n          var msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'false', '');\n          this.wsSend(msg);\n        } else {\n          var _msg4 = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'true', '');\n\n          this.wsSend(_msg4);\n        }\n      } else {\n        if (userId == this.clients[0].userId) {\n          // 自己开关麦克风，通知所有人\n          if (this.clients[0].muted) {\n            // 打开麦克风\n            console.log();\n\n            var _msg5 = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'false', this.clients[0].userId);\n\n            this.wsSend(_msg5);\n          } else {\n            // 关闭麦克风\n            var _msg6 = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'true', this.clients[0].userId);\n\n            this.wsSend(_msg6);\n          }\n        } else {\n          // 别人\n          if (this.clients[0].isRoomAdmin) {\n            // 自己是管理员，就要彻底开关他的麦克风\n            if (this.clients[Number(userId)].muted) {\n              // 通知所有人打开此人麦克风\n              var _msg7 = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'false', userId);\n\n              this.wsSend(_msg7);\n            } else {\n              // 通知所有人关闭此人麦克风\n              var _msg8 = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'true', userId);\n\n              this.wsSend(_msg8);\n            }\n          } else {\n            if (this.clients[Number(userId)].muted) {\n              this.clients[Number(userId)].muted = false;\n            } else {\n              this.clients[Number(userId)].muted = true;\n            }\n          }\n        }\n      }\n    },\n    fullScreen: function fullScreen(userId) {\n      console.log('fullScreen:' + userId);\n\n      if (userId === this.clients[0].userId) {\n        this.$refs.video_full.srcObject = this.clients[0].localStream;\n        this.fullScreenId = '0';\n      } else {\n        this.$refs.video_full.srcObject = this.clients[userId].localStream;\n        this.fullScreenId = userId;\n      }\n    },\n    kick: function kick(userId) {\n      console.log('kick:' + userId);\n      var msg = new MessageModel(TYPE_COMMAND_KICK, this.roomFromDate.roomId, '', userId);\n      this.wsSend(msg);\n      console.log(\"踢出\"); //踢出去\n\n      this.ch = 2;\n      this.init(this.ch);\n    },\n    changeView: function changeView(userId) {\n      console.log('changeView:' + userId); // console.log(this.clients[0].userId)\n      // console.log(typeof (userId))\n\n      var uid = userId.toString(); // console.log(typeof (this.clients[0].userId))\n\n      if (userId === '') {\n        if (this.isView) {\n          var msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'false', '');\n          this.wsSend(msg);\n        } else {\n          var _msg9 = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'true', '');\n\n          this.wsSend(_msg9);\n        }\n      } else {\n        if (uid === this.clients[0].userId) {\n          // 自己开关视频，通知所有人\n          if (this.clients[0].view) {\n            // 打开视频\n            var _msg10 = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'false', this.clients[0].userId);\n\n            this.wsSend(_msg10);\n          } else {\n            // 关闭视频\n            var _msg11 = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'true', this.clients[0].userId);\n\n            this.wsSend(_msg11);\n          }\n        } else {\n          // 别人\n          if (this.clients[0].isRoomAdmin) {\n            // 自己是管理员，就要彻底开关他的视频\n            // console.log(\"0.0\")\n            if (this.clients[Number(userId)].view) {\n              // 通知所有人打开此人视频\n              var _msg12 = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'false', userId);\n\n              this.wsSend(_msg12);\n            } else {\n              // 通知所有人关闭此人视频\n              var _msg13 = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'true', userId);\n\n              this.wsSend(_msg13);\n            }\n          } else {\n            if (this.clients[Number(userId)].view) {\n              this.clients[Number(userId)].view = false;\n\n              if (this.fullScreenId !== '0') {\n                this.$refs.video_full.srcObject = null;\n              }\n            } else {\n              this.clients[Number(userId)].view = true;\n            }\n          }\n        }\n      }\n    },\n    notice: function notice(msg) {\n      console.log('notice:' + msg);\n    },\n    sendChat: function sendChat(msg) {\n      console.log('sendChat:' + msg);\n\n      if (!this.clients[0].chat) {\n        this.$message.error('已被禁言...');\n        return;\n      }\n\n      msg = new MessageModel(TYPE_COMMAND_CHAT, this.roomFromDate.roomId, this.roomFromDate.nickname + ': ' + msg + '\\n');\n      this.wsSend(msg);\n    },\n    receiveMsgHandle: function receiveMsgHandle(msg) {\n      // clients[0]默认就有\n      var c1 = {\n        userId: '11'\n      };\n      this.$set(this.clients, 1, c1);\n      var c3 = {\n        userId: '33'\n      };\n      this.$set(this.clients, 3, c3);\n      console.log(this.clients);\n    },\n    createOrEnterRoom: function createOrEnterRoom(method) {\n      var _this6 = this;\n\n      // 进入房间\n      this.$refs.romeForm.validate(function (valid) {\n        if (valid) {\n          var msg;\n\n          if (method === 'create') {\n            msg = new MessageModel(TYPE_COMMAND_ROOM_CREATE, _this6.roomFromDate.roomId, _this6.roomFromDate.nickname, _this6.user.id, _this6.roomFromDate.roomPw);\n            console.log('创建房间:' + JSON.stringify(msg));\n\n            _this6.wsSend(msg);\n          } else {\n            console.log('加入房间:' + _this6.roomFromDate.roomId);\n            msg = new MessageModel(TYPE_COMMAND_ROOM_ENTER, _this6.roomFromDate.roomId, _this6.roomFromDate.nickname, _this6.user.id, _this6.roomFromDate.roomPw);\n\n            _this6.wsSend(msg);\n          }\n        } else {\n          console.log('表单验证错误');\n          return false;\n        }\n      });\n    },\n    successHandle: function successHandle(message) {\n      var _this7 = this;\n\n      // store.dispatch('user/setNickname', this.roomFromDate.nickname)\n      this.startV().then(function () {\n        _this7.isInRoom = true;\n        _this7.dialogFormVisible = false;\n        _this7.clients[0].userId = message.userId;\n        _this7.clients[0].roomId = message.roomId;\n        _this7.clients[0].nickname = _this7.roomFromDate.nickname;\n\n        if (message.message === 'create') {\n          console.log('创建房间成功');\n          _this7.clients[0].isRoomAdmin = true;\n        } else {\n          console.log('进入房间成功');\n          _this7.clients[0].isRoomAdmin = false;\n        } // 广播 自己准备好了,其他用户收到后就会创建连接\n\n\n        var msg = new MessageModel(TYPE_COMMAND_READY, _this7.roomFromDate.roomId, _this7.roomFromDate.nickname, message.userId, '', _this7.clients[0].isRoomAdmin);\n        console.log('发送准备完毕广播' + msg);\n\n        _this7.wsSend(msg);\n\n        _this7.$message.success('成功!');\n      });\n    },\n    readyHandle: function readyHandle(message) {\n      var _this8 = this;\n\n      // 收到上线的用户准备好信号，创建RTCPeerConnectio准备与他连接并发送offer\n      if (this.clients[0].userId === message.userId) {\n        // 是自己准备好了\n        console.log(\"=======NO+======\" + message);\n        this.ch = 1;\n        this.init(this.ch);\n      } else {\n        console.log(\"我准备好了\");\n        var rtcPeerConnection = new RTCPeerConnection(iceServers);\n        rtcPeerConnection.userId = message.userId;\n\n        var _iterator = _createForOfIteratorHelper(this.clients[0].localStream.getTracks()),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var track = _step.value;\n            rtcPeerConnection.addTrack(track, this.clients[0].localStream);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        rtcPeerConnection.ontrack = this.onTrack;\n        rtcPeerConnection.onicecandidate = this.onIceCandidate;\n        var remoteClient = {\n          userId: message.userId,\n          roomId: message.roomId,\n          nickname: message.message,\n          localStream: undefined,\n          peerConnection: rtcPeerConnection,\n          muted: false,\n          view: true,\n          chat: true,\n          isSelf: false,\n          isRoomAdmin: JSON.parse(message.userId),\n          nowStream: 'screen'\n        };\n        this.$set(this.clients, Number(message.userId), remoteClient);\n        console.log('准备完毕,添加了一个连接');\n        this.ch = 1;\n        this.init(this.ch);\n        console.log(this.clients);\n        console.log('创建offer');\n        rtcPeerConnection.createOffer(offerOptions).then(function (description) {\n          console.log('创建offer,设置本地Description');\n          console.log(description);\n          rtcPeerConnection.setLocalDescription(description);\n          var msg = new MessageModel(TYPE_COMMAND_OFFER, _this8.clients[0].roomId, _this8.messageDateToString(description), message.userId, _this8.roomFromDate.nickname, _this8.clients[0].isRoomAdmin); // 字段不够用,把名字临时放在roomPw字段\n\n          console.log('发送offer');\n\n          _this8.wsSend(msg);\n        }).catch();\n      }\n    },\n    offerHandle: function offerHandle(message) {\n      var _this9 = this;\n\n      var rtcPeerConnection = new RTCPeerConnection(iceServers);\n      rtcPeerConnection.userId = message.userId;\n      console.log('本地流');\n      console.log(this.clients[0].localStream);\n\n      var _iterator2 = _createForOfIteratorHelper(this.clients[0].localStream.getTracks()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var track = _step2.value;\n          rtcPeerConnection.addTrack(track, this.clients[0].localStream);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      rtcPeerConnection.ontrack = this.onTrack;\n      rtcPeerConnection.onicecandidate = this.onIceCandidate;\n      var remoteClient = {\n        userId: message.userId,\n        roomId: message.roomId,\n        nickname: message.roomPw,\n        localStream: undefined,\n        peerConnection: rtcPeerConnection,\n        muted: false,\n        view: true,\n        chat: true,\n        isSelf: false,\n        isRoomAdmin: JSON.parse(message.userId),\n        nowStream: 'screen'\n      };\n      this.$set(this.clients, Number(message.userId), remoteClient);\n      console.log('接受到offer,添加了一个连接');\n      this.ch = 1;\n      this.init(this.ch);\n      console.log(this.clients);\n      var sdp = JSON.parse(message.message);\n      rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(sdp)).then(console.log('收到offer,设置远程Description 完毕'));\n      rtcPeerConnection.createAnswer(offerOptions).then(function (description) {\n        console.log('创建answer,设置本地Description');\n        rtcPeerConnection.setLocalDescription(description);\n        var msg = new MessageModel(TYPE_COMMAND_ANSWER, _this9.clients[0].roomId, _this9.messageDateToString(description), message.userId); // console.log('发送answer:' + JSON.stringify(msg))\n\n        _this9.wsSend(msg);\n      }).catch(function () {\n        console.log('创建answer,设置本地AndAnswer 错误');\n      });\n    },\n    answerHandle: function answerHandle(message) {\n      this.clients[Number(message.userId)].peerConnection.setRemoteDescription(JSON.parse(message.message)).then(console.log('收到answer,设置远程描述完毕')); // this.$set(this.clients[Number(message.userId)], 'peerConnection', this.clients[Number(message.userId)].peerConnection)\n    },\n    onIceCandidate: function onIceCandidate(event) {\n      console.log('onIceCandidate'); // console.log(event)\n\n      if (event.candidate === null) {\n        console.log('Candidata为null');\n        return;\n      }\n\n      var msg = new MessageModel(TYPE_COMMAND_CANDIDATE, this.clients[0].roomId, this.messageDateToString(event.candidate), event.target.userId); // console.log('发送Candidate:' + JSON.stringify(msg))\n\n      this.wsSend(msg);\n    },\n    candidateHandle: function candidateHandle(message) {\n      console.log('收到Candidata'); // console.log(message)\n\n      console.log(this.clients);\n      var newIceCandidata = new RTCIceCandidate(JSON.parse(message.message));\n      this.clients[Number(message.userId)].peerConnection.addIceCandidate(newIceCandidata).then(console.log('添加Candidata成功')).catch(function (error) {\n        console.log('添加Candidata失败:' + error);\n      });\n    },\n    onTrack: function onTrack(event) {\n      console.log('收到数据流' + event.target.userId);\n      this.clients[Number(event.target.userId)].localStream = event.streams[0];\n    },\n    closeView: function closeView() {\n      if (this.isInRoom === false) {\n        this.$router.go(-1);\n      }\n    },\n    initLocalWebsocket: function initLocalWebsocket() {\n      var _this10 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var response;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                console.log('初始化weosocket');\n                _context4.next = 3;\n                return getUrl();\n\n              case 3:\n                response = _context4.sent;\n                _this10.wsUrl = response.data;\n                console.log('获取到wsurl:' + _this10.wsUrl);\n                _this10.localWebsocket = new WebSocket(_this10.wsUrl);\n                _this10.localWebsocket.onmessage = _this10.wseReceiveMessage;\n\n                _this10.localWebsocket.onopen = function () {\n                  console.log('localWebsocket打开');\n                };\n\n                _this10.localWebsocket.onerror = function () {\n                  console.log('localWebsocket错误'); // 重连？\n                };\n\n                _this10.localWebsocket.onclose = function (e) {\n                  console.log('localWebsocket关闭' + e);\n                };\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }))();\n    },\n    wseReceiveMessage: function wseReceiveMessage(e) {\n      // 数据接收\n      console.log('数据接收:');\n      console.log(e.data);\n      var str = e.data.toString().replace(/!@#/g, '');\n      var message = JSON.parse(str);\n\n      switch (message.command) {\n        case TYPE_COMMAND_SUCCESS:\n          this.successHandle(message);\n          break;\n\n        case TYPE_COMMAND_ERROR:\n          this.$message.error(message.message);\n          break;\n\n        case TYPE_COMMAND_CHAT:\n          this.receiveMsg = message.message;\n          break;\n\n        case TYPE_COMMAND_READY:\n          this.readyHandle(message);\n          break;\n\n        case TYPE_COMMAND_OFFER:\n          message.message;\n          this.offerHandle(message);\n          break;\n\n        case TYPE_COMMAND_ANSWER:\n          this.answerHandle(message);\n          break;\n\n        case TYPE_COMMAND_CANDIDATE:\n          this.candidateHandle(message);\n          break;\n\n        case TYPE_COMMAND_VIEW:\n          this.viewHandle(message);\n          break;\n\n        case TYPE_COMMAND_MUTED:\n          this.mutedHandle(message);\n          break;\n\n        case TYPE_COMMAND_BAN:\n          this.banHandle(message);\n          break;\n\n        case TYPE_COMMAND_KICK:\n          this.kickHandle(message);\n          break;\n      }\n    },\n    viewHandle: function viewHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体开启视频\n          this.isView = true;\n          this.clients.forEach(function (c) {\n            if (c !== undefined) {\n              c.view = true;\n            }\n          });\n        } else {\n          // 全体关闭视频\n          if (this.fullScreenId !== '0') {\n            this.$refs.video_full.srcObject = null;\n          }\n\n          this.isView = false;\n          this.clients.forEach(function (c) {\n            if (c !== undefined) {\n              c.view = false;\n            }\n          });\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].view = true;\n            this.clients[0].localStream.getVideoTracks()[0].enabled = true;\n          } else {\n            this.clients[0].view = false;\n            this.clients[0].localStream.getVideoTracks()[0].enabled = false;\n\n            if (this.fullScreenId === '0') {\n              this.$refs.video_full.srcObject = null;\n            }\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].view = true;\n          } else {\n            this.clients[Number(message.userId)].view = false;\n\n            if (this.fullScreenId === message.userId) {\n              this.$refs.video_full.srcObject = null;\n            }\n          }\n        }\n      }\n    },\n    getusers: function getusers(message) {\n      console.log(message);\n    },\n    mutedHandle: function mutedHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体静音\n          this.isMuted = true;\n          this.clients.forEach(function (c) {\n            if (c !== undefined) {\n              c.muted = true;\n            }\n          });\n        } else {\n          // 全体取消静音\n          this.isMuted = false;\n          this.clients.forEach(function (c) {\n            if (c !== undefined) {\n              c.muted = false;\n            }\n          });\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].muted = true;\n            this.clients[0].localStream.getAudioTracks()[0].enabled = false;\n          } else {\n            this.clients[0].muted = false;\n            this.clients[0].localStream.getAudioTracks()[0].enabled = true;\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].muted = true;\n          } else {\n            this.clients[Number(message.userId)].muted = false;\n          }\n        }\n      }\n    },\n    banHandle: function banHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体禁言\n          this.isBan = true;\n          this.clients.forEach(function (c) {\n            if (c !== undefined) {\n              c.chat = false;\n            }\n          });\n        } else {\n          // 全体取消禁言\n          this.isBan = false;\n          this.clients.forEach(function (c) {\n            if (c !== undefined) {\n              c.chat = true;\n            }\n          });\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].chat = false;\n          } else {\n            this.clients[0].chat = true;\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].chat = false;\n          } else {\n            this.clients[Number(message.userId)].chat = true;\n          }\n        }\n      }\n    },\n    kickHandle: function kickHandle(message) {\n      if (message.userId === this.clients[0].userId) {\n        this.$message.error('您被踢出会议!');\n        this.$router.go(-1);\n        this.ch = 2;\n        this.init(this.ch);\n      } else {\n        this.clients[Number(message.userId)].peerConnection.close();\n        this.clients.splice(Number(message.userId), 1);\n        this.ch = 2;\n        this.init(this.ch);\n      }\n    },\n    wsSend: function wsSend(data) {\n      // 数据发送\n      this.localWebsocket.send(JSON.stringify(data));\n    },\n    messageDateToString: function messageDateToString(data) {\n      // 如果message字段是对象，就把他变成字符串，这样服务器解析不会报错\n      return '!@#' + JSON.stringify(data) + '!@#';\n    }\n  }\n};\n\nvar MessageModel = /*#__PURE__*/_createClass(function MessageModel(command, roomId, message, userId, roomPw) {\n  _classCallCheck(this, MessageModel);\n\n  this.command = command;\n  this.userId = userId;\n  this.roomId = roomId;\n  this.message = message;\n  this.roomPw = roomPw;\n});\n\nvar TYPE_COMMAND_ROOM_ENTER = 'enterRoom';\nvar TYPE_COMMAND_ROOM_CREATE = 'createRoom';\nvar TYPE_COMMAND_READY = 'ready';\nvar TYPE_COMMAND_OFFER = 'offer';\nvar TYPE_COMMAND_ANSWER = 'answer';\nvar TYPE_COMMAND_CANDIDATE = 'candidate';\nvar TYPE_COMMAND_ERROR = 'error';\nvar TYPE_COMMAND_SUCCESS = 'success';\nvar TYPE_COMMAND_CHAT = 'chat';\nvar TYPE_COMMAND_MUTED = 'MUTED';\nvar TYPE_COMMAND_VIEW = 'VIEW';\nvar TYPE_COMMAND_BAN = 'BAN';\nvar TYPE_COMMAND_KICK = 'KICK';\nvar TYPE_COMMAND_GETUSER = \"users\"; // const TYPE_COMMAND_SIGN = 'SIGN'\n\nvar iceServers = {\n  'iceServers': [{\n    url: 'stun:stun.ekiga.net'\n  }, {\n    url: 'stun:stun.ideasip.com'\n  }]\n};\nvar offerOptions = {\n  iceRestart: true,\n  offerToReceiveAudio: true,\n  offerToReceiveVideo: true\n};\nvar constraints = {\n  audio: true,\n  video: true\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8HA;AACA;AACA;AACA;AACA;AACA;AACA;EACAA,eADA;EAEAC;IAAAC;IAAAC;EAAA,CAFA;EAGAC,IAHA,kBAGA;IACA;MACA;QACAC;MACA,CAFA,MAEA;QACA;;QACA;UACA;QACA;;QACAA;MACA;IACA,CAVA;;IAWA;MACAC,kFADA;MAEAC,SAFA;MAGAC,MAHA;MAIAC,cAJA;MAKAC,wBALA;MAMAC,yBANA;MAOAC,gBAPA;MAQAC,cARA;MASAC,eATA;MAUAC,YAVA;MAWAC,YAXA;MAYAC,cAZA;MAaAC,gBAbA;MAcAC;QACAC,WADA;QAEAC,eAFA;QAGAC,WAHA;QAIAC,sBAJA;QAKAC,yBALA;QAMAC,YANA;QAOAC,UAPA;QAQAC,UARA;QASAC,aATA;QAUAC,kBAVA;QAWAC;MAXA,EAdA;MA2BAC;QACAV,YADA;QAEAC,UAFA;QAGAU,UAHA;QAIAC;MAJA,CA3BA;MAiCAC;QACAZ,SACA;UAAAa;UAAAC;QAAA,CADA,CADA;QAIAJ,SACA;UAAAG;UAAAC;QAAA,CADA;MAJA;IAjCA;EA0CA,CAzDA;EA2DAC,OA3DA,qBA2DA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;cACA;cACA;cAFA;cAAA;cAAA,OAIA,0BAJA;;YAAA;cAAA;cAAA;;YAAA;cAAA;cAAA;cAMAC;;cACA;;cACA;;YARA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAUA,CArEA;EAsEAC,aAtEA,2BAsEA;IACAD;EACA,CAxEA;EAyEAE,SAzEA,uBAyEA;IACA;MACA;MACA;MACA;MACA;IACA;;IACA;MAEA,4BAFA,CAEA;IACA;;IACA;EACA,CArFA;EAuFAC;IACA;IACAC,MAFA,oBAEA;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MACA,iCADA;kBAAA;kBAAA;gBAAA;;gBAEAJ;gBAFA;gBAAA,OAGAK,mDAHA;;cAAA;gBAGAC,WAHA;gBAAA;gBAAA,OAIAD;kBAAAE;kBAAAC;gBAAA,EAJA;;cAAA;gBAIAC,WAJA;gBAKAT;gBACAU,EANA,GAMA;kBACA5B,WADA;kBAEAE,WAFA;kBAGAD,eAHA;kBAIAE,wBAJA;kBAKAC,yBALA;kBAMAC,YANA;kBAOAC,UAPA;kBAQAC,UARA;kBASAC,YATA;kBAUAC,kBAVA;kBAWAC;gBAXA,CANA;gBAmBAkB;;gBACA;;gBACAV;gBACAA;gBACAA;gBAvBA;gBAAA;;cAAA;gBAyBAA;gBAzBA;gBAAA,OA0BAK;kBAAAE;kBAAAC;gBAAA,EA1BA;;cAAA;gBA0BAG,YA1BA;gBA2BAX;gBACAY,GA5BA,GA4BA;kBACA9B,WADA;kBAEAE,WAFA;kBAGAD,eAHA;kBAIAE,yBAJA;kBAKAC,yBALA;kBAMAC,YANA;kBAOAC,UAPA;kBAQAC,UARA;kBASAC,YATA;kBAUAC,kBAVA;kBAWAC;gBAXA,CA5BA;;gBAyCA;;gBACAQ;gBACAA;gBACAA;;cA5CA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IA8CA,CAhDA;IAiDAa,IAjDA,gBAiDA3C,EAjDA,EAiDA;MAAA;;MACA;QACA;UACA;YACA;;YACA;;YACA;cAAA;YAAA;;YACA;YACA8B;UACA;QACA,CARA;MASA;;MACA;QACA;QACA;UACA;YACA;;YACAA;YACA;;YACA;cAAA;YAAA;;YACA;UAEA;QACA,CATA;MAUA;IACA,CA1EA;IA2EAc,KA3EA,mBA2EA;MACA;QACAC;MACA,CAFA;IAGA,CA/EA;IAgFAC,IAhFA,kBAgFA;MAAA;;MACAX;QAAAY;MAAA;QACA;MACA,CAFA,EAEAC,KAFA,CAEA;QACAlB;MACA,CAJA;IAKA,CAtFA;IAuFAmB,YAvFA,wBAuFArC,MAvFA,EAuFA;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,MACA,wCADA;kBAAA;kBAAA;gBAAA;;gBAEAuB;kBAAAG;kBAAAD;gBAAA,GACAa,IADA,CACA;kBACA;;kBACApB;kBACA;kBACAA;gBACA,CANA,EAMAkB,KANA,CAMA;kBACAlB;gBACA,CARA;gBASA;gBAXA;gBAAA;;cAAA;gBAaA;;gBAbA;gBAAA,OAcAK,mDAdA;;cAAA;gBAcAC,WAdA;gBAAA;gBAAA,OAeAD;kBAAAE;kBAAAC;gBAAA,EAfA;;cAAA;gBAeAC,WAfA;gBAgBAT;gBACA;;gBACA;;gBACAA;gBACA;;cApBA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAsBA,CA7GA;IA8GAqB,GA9GA,eA8GAvC,MA9GA,EA8GA;MACAkB;;MACA;QAAA;QACA;UAAA;UACA;UACA;QACA,CAHA,MAGA;UACA;UACA;;UACA;QACA;MACA,CATA,MASA;QACA;UAAA;UACA;;UACA;QACA,CAHA,MAGA;UAAA;UACA;;UACA;QACA;MACA;IACA,CAlIA;IAmIAsB,WAnIA,uBAmIAxC,MAnIA,EAmIA;MACAkB;;MACA;QACA;UACA;UACA;QACA,CAHA,MAGA;UACA;;UACA;QACA;MACA,CARA,MAQA;QACA;UAAA;UACA;YACA;YACAA;;YACA;;YACA;UACA,CALA,MAKA;YACA;YACA;;YACA;UACA;QACA,CAXA,MAWA;UAAA;UACA;YAAA;YACA;cACA;cACA;;cACA;YACA,CAJA,MAIA;cACA;cACA;;cACA;YACA;UACA,CAVA,MAUA;YACA;cACA;YACA,CAFA,MAEA;cACA;YACA;UACA;QACA;MACA;IACA,CA7KA;IA8KAuB,UA9KA,sBA8KAzC,MA9KA,EA8KA;MACAkB;;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA;QACA;MACA;IACA,CAvLA;IAwLAwB,IAxLA,gBAwLA1C,MAxLA,EAwLA;MACAkB;MACA;MACA;MACAA,kBAJA,CAKA;;MACA;MACA;IACA,CAhMA;IAiMAyB,UAjMA,sBAiMA3C,MAjMA,EAiMA;MACAkB,oCADA,CAEA;MACA;;MACA,4BAJA,CAKA;;MACA;QACA;UACA;UACA;QACA,CAHA,MAGA;UACA;;UACA;QACA;MACA,CARA,MAQA;QACA;UAAA;UACA;YACA;YACA;;YACA;UACA,CAJA,MAIA;YACA;YACA;;YAEA;UACA;QACA,CAXA,MAWA;UAAA;UACA;YAAA;YACA;YACA;cACA;cACA;;cACA;YACA,CAJA,MAIA;cACA;cACA;;cACA;YACA;UACA,CAXA,MAWA;YAEA;cACA;;cACA;gBACA;cACA;YACA,CALA,MAKA;cACA;YAEA;UACA;QACA;MACA;IACA,CArPA;IAsPA0B,MAtPA,kBAsPAC,GAtPA,EAsPA;MACA3B;IACA,CAxPA;IAyPA4B,QAzPA,oBAyPAD,GAzPA,EAyPA;MACA3B;;MACA;QACA;QACA;MACA;;MACA2B;MACA;IACA,CAjQA;IAkQAE,gBAlQA,4BAkQAF,GAlQA,EAkQA;MACA;MACA;QACA7C;MADA;MAGA;MACA;QACAA;MADA;MAGA;MACAkB;IACA,CA7QA;IA8QA8B,iBA9QA,6BA8QAC,MA9QA,EA8QA;MAAA;;MAAA;MACA;QACA;UACA;;UACA;YACAJ;YACA3B;;YACA;UACA,CAJA,MAIA;YACAA;YACA2B;;YACA;UACA;QACA,CAXA,MAWA;UACA3B;UACA;QACA;MACA,CAhBA;IAiBA,CAhSA;IAiSAgC,aAjSA,yBAiSAC,OAjSA,EAiSA;MAAA;;MACA;MACA;QACA;QACA;QACA;QACA;QACA;;QACA;UACAjC;UACA;QACA,CAHA,MAGA;UACAA;UACA;QACA,CAZA,CAaA;;;QACA;QACAA;;QACA;;QACA;MACA,CAlBA;IAmBA,CAtTA;IAuTAkC,WAvTA,uBAuTAD,OAvTA,EAuTA;MAAA;;MAAA;MACA;QAAA;QACAjC;QACA;QACA;MACA,CAJA,MAIA;QACAA;QACA;QACAmC;;QAHA,2CAIA,uCAJA;QAAA;;QAAA;UAIA;YAAA;YACAA;UACA;QANA;UAAA;QAAA;UAAA;QAAA;;QAOAA;QACAA;QACA;UACArD,sBADA;UAEAE,sBAFA;UAGAD,yBAHA;UAIAE,sBAJA;UAKAC,iCALA;UAMAC,YANA;UAOAC,UAPA;UAQAC,UARA;UASAC,aATA;UAUAC,uCAVA;UAWAC;QAXA;QAaA;QACAQ;QACA;QACA;QACAA;QACAA;QACAmC;UACAnC;UACAA;UACAmC;UACA,+LAJA,CAIA;;UACAnC;;UACA;QACA,CAPA,EAOAkB,KAPA;MAQA;IACA,CAjWA;IAkWAkB,WAlWA,uBAkWAH,OAlWA,EAkWA;MAAA;;MACA;MACAE;MACAnC;MACAA;;MAJA,4CAKA,uCALA;MAAA;;MAAA;QAKA;UAAA;UACAmC;QACA;MAPA;QAAA;MAAA;QAAA;MAAA;;MASAA;MACAA;MACA;QACArD,sBADA;QAEAE,sBAFA;QAGAD,wBAHA;QAIAE,sBAJA;QAKAC,iCALA;QAMAC,YANA;QAOAC,UAPA;QAQAC,UARA;QASAC,aATA;QAUAC,uCAVA;QAWAC;MAXA;MAaA;MACAQ;MACA;MACA;MACAA;MACA;MACAmC,uEACAf,IADA,CAEApB,yCAFA;MAIAmC,6CACAf,IADA,CACA;QACApB;QACAmC;QACA,mIAHA,CAIA;;QACA;MACA,CAPA,EAQAjB,KARA,CAQA;QACAlB;MACA,CAVA;IAYA,CAhZA;IAiZAqC,YAjZA,wBAiZAJ,OAjZA,EAiZA;MACA,2GACAjC,gCADA,EADA,CAIA;IACA,CAtZA;IAuZAsC,cAvZA,0BAuZAC,KAvZA,EAuZA;MACAvC,8BADA,CAEA;;MACA;QACAA;QACA;MACA;;MACA,2IAPA,CAQA;;MACA;IACA,CAjaA;IAkaAwC,eAlaA,2BAkaAP,OAlaA,EAkaA;MACAjC,2BADA,CAEA;;MACAA;MACA;MACA,qFACAoB,IADA,CACApB,4BADA,EACAkB,KADA,CACA;QACAlB;MACA,CAHA;IAIA,CA3aA;IA4aAyC,OA5aA,mBA4aAF,KA5aA,EA4aA;MACAvC;MACA;IACA,CA/aA;IAgbA0C,SAhbA,uBAgbA;MACA;QACA;MACA;IACA,CApbA;IAqbAC,kBArbA,gCAqbA;MAAA;;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACA3C;gBADA;gBAAA,OAEA4C,QAFA;;cAAA;gBAEAC,QAFA;gBAGA;gBACA7C;gBACA;gBACA;;gBACA;kBACAA;gBACA,CAFA;;gBAGA;kBACAA,gCADA,CAEA;gBACA,CAHA;;gBAIA;kBACAA;gBACA,CAFA;;cAdA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAiBA,CAtcA;IAucA8C,iBAvcA,6BAucAC,CAvcA,EAucA;MAAA;MACA/C;MACAA;MACA;MACA;;MACA;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACAiC;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;;QACA;UACA;UACA;MAlCA;IAoCA,CAhfA;IAifAe,UAjfA,sBAifAf,OAjfA,EAifA;MACA;QACA;UACA;UACA;UACA;YACA;cACAgB;YACA;UACA,CAJA;QAKA,CARA,MAQA;UACA;UACA;YACA;UACA;;UACA;UACA;YACA;cACAA;YACA;UACA,CAJA;QAKA;MACA,CArBA,MAqBA;QACA;UACA;YACA;YACA;UACA,CAHA,MAGA;YACA;YACA;;YACA;cACA;YACA;UACA;QACA,CAXA,MAWA;UACA;YACA;UACA,CAFA,MAEA;YACA;;YACA;cACA;YACA;UACA;QACA;MACA;IACA,CA9hBA;IA+hBAC,QA/hBA,oBA+hBAjB,OA/hBA,EA+hBA;MACAjC;IACA,CAjiBA;IAmiBAmD,WAniBA,uBAmiBAlB,OAniBA,EAmiBA;MACA;QACA;UACA;UACA;UACA;YACA;cACAgB;YACA;UACA,CAJA;QAKA,CARA,MAQA;UACA;UACA;UACA;YACA;cACAA;YACA;UACA,CAJA;QAKA;MACA,CAlBA,MAkBA;QACA;UACA;YACA;YACA;UACA,CAHA,MAGA;YACA;YACA;UACA;QACA,CARA,MAQA;UACA;YACA;UACA,CAFA,MAEA;YACA;UACA;QACA;MACA;IACA,CAvkBA;IAukBAG,SAvkBA,qBAukBAnB,OAvkBA,EAukBA;MACA;QACA;UACA;UACA;UACA;YACA;cACAgB;YACA;UACA,CAJA;QAKA,CARA,MAQA;UACA;UACA;UACA;YACA;cACAA;YACA;UACA,CAJA;QAKA;MACA,CAlBA,MAkBA;QACA;UACA;YACA;UACA,CAFA,MAEA;YACA;UACA;QACA,CANA,MAMA;UACA;YACA;UACA,CAFA,MAEA;YACA;UACA;QACA;MACA;IACA,CAzmBA;IAymBAI,UAzmBA,sBAymBApB,OAzmBA,EAymBA;MACA;QACA;QACA;QACA;QACA;MACA,CALA,MAKA;QACA;QACA;QACA;QACA;MACA;IACA,CArnBA;IAsnBAqB,MAtnBA,kBAsnBAxF,IAtnBA,EAsnBA;MAAA;MACA;IACA,CAxnBA;IAynBAyF,mBAznBA,+BAynBAzF,IAznBA,EAynBA;MAAA;MACA;IACA;EA3nBA;AAvFA;;IAwtBA0F,Y,6BACA;EAAA;;EACA;EACA;EACA;EACA;EACA;AACA,C;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,mC,CACA;;AAEA;EACA,eACA;IAAAC;EAAA,CADA,EAEA;IAAAA;EAAA,CAFA;AADA;AAMA;EACAC,gBADA;EAEAC,yBAFA;EAGAC;AAHA;AAKA;EACArD,WADA;EAEAC;AAFA","names":["name","components","Preview","Chat","data","callback","user","users","ch","meetingId","dialogFormVisible","localWebsocket","wsUrl","receiveMsg","isInRoom","isBan","isView","isMuted","fullScreenId","clients","userId","nickname","roomId","localStream","peerConnection","muted","view","chat","isSelf","isRoomAdmin","nowStream","roomFromDate","roomPw","radio","roomFromRules","validator","trigger","mounted","console","beforeDestroy","destroyed","methods","startV","navigator","mediaStream","audio","video","audioStream","c0","audioStream1","c01","init","stopV","track","addV","constraints","catch","changeStream","then","ban","changeMicro","fullScreen","kick","changeView","notice","msg","sendChat","receiveMsgHandle","createOrEnterRoom","method","successHandle","message","readyHandle","rtcPeerConnection","offerHandle","answerHandle","onIceCandidate","event","candidateHandle","onTrack","closeView","initLocalWebsocket","getUrl","response","wseReceiveMessage","e","viewHandle","c","getusers","mutedHandle","banHandle","kickHandle","wsSend","messageDateToString","MessageModel","url","iceRestart","offerToReceiveAudio","offerToReceiveVideo"],"sourceRoot":"src/views/meeting","sources":["index.vue"],"sourcesContent":["<template>\n  <div class=\"meeting-container\">\n\n    <el-card style=\"background: whitesmoke;width: 300px; height: 870px; color: #333\">\n      <div style=\"padding-bottom: 10px; border-bottom: 1px solid #ccc\"><i class=\"el-icon-user-solid\" style=\"padding-right: 10px\"></i>在线用户<span style=\"font-size: 12px;\"></span></div>\n      <div style=\"padding: 10px 0\" v-for=\"item of users\" :key=\"item\">\n        <span>{{ item }}</span>\n      </div>\n    </el-card>\n\n    <el-card  style=\"\n    padding: 10px;\n    margin: 20px;\n    position: absolute;\n    left: 297px;\n    background: whitesmoke;\n    top: -6px;\">\n      <div style=\"height:50px\">\n        <h1>{{ this.meetingName }}</h1>\n        <el-divider></el-divider>\n      </div>\n      <el-container>\n      <el-header height=\"214px\">\n        <template v-for=\"(client) in clients\">\n          <preview\n              v-if=\"client!==undefined\"\n              :key=\"client.userId\"\n              :client=\"client\"\n              :is-room-admin=\"clients[0].isRoomAdmin\"\n              @banEvent=\"ban\"\n              @microEvent=\"changeMicro\"\n              @fullEvent=\"fullScreen\"\n              @kickEvent=\"kick\"\n              @viewEvent=\"changeView\"\n              @changeStreamEvent=\"changeStream\"\n          />\n        </template>\n      </el-header>\n      <el-container>\n        <el-main>\n          <div style=\"text-align: center ;height: calc(100vh - 300px);width: 100%\">\n            <video ref=\"video_full\" style=\"height:100%\" muted autoplay playsinline />\n\n<!--            <el-button  type=\"danger\" round size=\"mini\" @click=\"changeView(user.id)\">-->\n<!--              <span v-show=\"this.clients[0].view\">-->\n<!--                关闭视频-->\n<!--              </span>-->\n<!--              <span v-show=\"!this.clients[0].view\">-->\n<!--                打开视频-->\n<!--              </span>-->\n<!--            </el-button>-->\n\n\n<!--            <el-button  type=\"danger\" round size=\"mini\" @click=\"changeMicro(user.id)\">-->\n<!--              <span v-show=\"!this.clients[0].muted\" >-->\n<!--                关闭语音-->\n<!--              </span>-->\n<!--              <span v-show=\"this.clients[0].muted\">-->\n<!--                打开语音-->\n<!--              </span>-->\n<!--            </el-button>-->\n\n\n            <div> <button class=\"btn2\" @click=\"kick(user.id)\" style=\"background: #f93030d9;border-radius: 10px;width: 90PX;height: 43px;border: none;\"><img class=\"img\" style=\"width: 49px;\" src=\"../../imgs/04挂断@2x.png\" alt=\"挂断\"/></button><span STYLE=\"position: relative; left: -75px;top: 35px; font-size: initial;\">离开会议</span></div>\n\n          </div>\n        </el-main>\n        <el-aside width=\"350px\">\n          <Chat :receive-msg=\"receiveMsg\" @chatEvent=\"sendChat\" @noticeEvent=\"notice\" />\n          <div style=\"text-align: center;margin-top: 10px\">\n            <el-button v-if=\"clients[0].isRoomAdmin\" type=\"danger\" round size=\"mini\" @click=\"changeView('')\">\n              <span v-show=\"isView\">\n                全体禁视\n              </span>\n              <span v-show=\"!isView\">\n                取消禁视\n              </span>\n            </el-button>\n\n\n            <el-button v-if=\"clients[0].isRoomAdmin\" type=\"danger\" round size=\"mini\" @click=\"changeMicro('')\">\n              <span v-show=\"!isMuted\">\n                全体禁音\n              </span>\n              <span v-show=\"isMuted\">\n                取消禁音\n              </span></el-button>\n            <el-button v-if=\"clients[0].isRoomAdmin\" type=\"danger\" round size=\"mini\" @click=\"ban('')\">\n              <span v-show=\"!isBan\">\n                全体禁言\n              </span>\n              <span v-show=\"isBan\">\n                取消禁言\n              </span></el-button>\n\n          </div>\n        </el-aside>\n      </el-container>\n    </el-container>\n</el-card>\n    <el-dialog title=\"请输入房间号和密码：\" :visible.sync=\"dialogFormVisible\" @close=\"closeView\">\n      <el-form ref=\"romeForm\" :model=\"roomFromDate\" status-icon :rules=\"roomFromRules\" label-width=\"100px\">\n        <el-form-item label=\"昵称:\" prop=\"nickname\">\n          <el-input v-model=\"roomFromDate.nickname\" maxlength=\"20\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"房间号:\" prop=\"roomId\">\n          <el-input v-model=\"roomFromDate.roomId\" maxlength=\"10\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"密码:\" prop=\"roomPw\">\n          <el-input v-model=\"roomFromDate.roomPw\" type=\"password\" maxlength=\"10\" autocomplete=\"off\" />\n        </el-form-item>\n        <el-form-item label=\"视频来源:\" prop=\"roomPw\">\n          <el-radio v-model=\"roomFromDate.radio\" label=\"1\">摄像头</el-radio>\n          <el-radio v-model=\"roomFromDate.radio\" label=\"2\">电脑屏幕</el-radio>\n        </el-form-item>\n        <el-form-item>\n          <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"createOrEnterRoom('enter')\">加 入</el-button>\n          <el-button type=\"primary\" @click=\"createOrEnterRoom('create')\">创 建</el-button>\n        </el-form-item>\n      </el-form>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport Preview from './components/Preview'\nimport Chat from './components/Chat'\nimport adapter from 'webrtc-adapter'\nimport { getUrl } from '@/api/websocketInfo'\nimport { mapGetters } from 'vuex'\nimport store from '@/store'\nexport default {\n  name: 'Meeting',\n  components: { Preview, Chat },\n  data() {\n    var valiRoomId = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入5-10位纯数字'))\n      } else {\n        var reg = /^\\d{5,10}$/\n        if (!reg.test(value)) {\n          return callback(new Error('请输入5-10位纯数字'))\n        }\n        callback()\n      }\n    }\n    return {\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\n      users:[],\n      ch:'',\n      meetingId: '0',\n      dialogFormVisible: false,\n      localWebsocket: undefined,\n      wsUrl: undefined,\n      receiveMsg: '',\n      isInRoom: false,\n      isBan: false,\n      isView: true,\n      isMuted: false,\n      fullScreenId: '',\n      clients: [{\n        userId: '0',\n        nickname: '未连接',\n        roomId: '0',\n        localStream: undefined,\n        peerConnection: undefined,\n        muted: false,\n        view: true,\n        chat: true,\n        isSelf: false,\n        isRoomAdmin: false,\n        nowStream: 'screen'\n      }],\n      roomFromDate: {\n        nickname: '',\n        roomId: '',\n        roomPw: '',\n        radio: '2'\n      },\n      roomFromRules: {\n        roomId: [\n          { validator: valiRoomId, trigger: 'blur' }\n        ],\n        roomPw: [\n          { validator: valiRoomId, trigger: 'blur' }\n        ]\n      }\n    }\n  },\n\n  async mounted() {\n    this.dialogFormVisible = true\n    this.roomFromDate.nickname = this.user.nickname\n    try {\n      await this.initLocalWebsocket()\n    } catch (e) {\n      console.log('websocket错误:' + e.message)\n      this.$message.error('网络连接错误!')\n      this.closeView()\n    }\n  },\n  beforeDestroy() {\n    console.log('即将销毁')\n  },\n  destroyed() {\n    if (this.isInRoom) {\n      const msg = new MessageModel(TYPE_COMMAND_KICK, this.roomFromDate.roomId, '', this.clients[0].userId)\n      this.ch=2\n      this.init(this.ch)\n      this.wsSend(msg)\n    }\n    if (this.localWebsocket !== undefined) {\n\n      this.localWebsocket.close() // 离开路由之后断开localWebsocket连接\n    }\n    this.stopV()\n  },\n\n  methods: {\n    // 设置本地播放器\n    async startV() {\n      if (this.roomFromDate.radio === '2') {\n        console.log(adapter.browserDetails.browser)\n        var mediaStream = await navigator.mediaDevices.getDisplayMedia(constraints)\n        var audioStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n        console.log('本地播放器设置')\n        const c0 = {\n          userId: '0',\n          roomId: '0',\n          nickname: '未连接',\n          localStream: mediaStream,\n          peerConnection: undefined,\n          muted: false,\n          view: true,\n          chat: true,\n          isSelf: true,\n          isRoomAdmin: false,\n          nowStream: 'screen'\n        }\n        c0.localStream.addTrack(audioStream.getAudioTracks()[0])\n        this.$set(this.clients, 0, c0)\n        console.log('本地流')\n        console.log(this.clients[0].localStream)\n        console.log('本地播放器设置成功')\n      } else {\n        console.log(adapter.browserDetails.browser)\n        var audioStream1 = await navigator.mediaDevices.getUserMedia({ audio: true, video: true })\n        console.log('摄像头设置')\n        const c01 = {\n          userId: '0',\n          roomId: '0',\n          nickname: '未连接',\n          localStream: audioStream1,\n          peerConnection: undefined,\n          muted: false,\n          view: true,\n          chat: true,\n          isSelf: true,\n          isRoomAdmin: false,\n          nowStream: 'screen'\n        }\n        this.$set(this.clients, 0, c01)\n        console.log('本地流')\n        console.log(this.clients[0].localStream)\n        console.log('本地摄像头设置成功')\n      }\n    },\n    init(ch){\n      if(ch===1){\n      this.clients.forEach(c => {\n        if (c !== undefined) {\n          this.users.push(c.nickname)\n          const map = new Map()\n          const qc = this.users.filter(key => !map.has(key) && map.set(key, 1))\n          this.users=qc\n          console.log(this.users)\n        }\n      })\n    }\n      if (ch===2) {\n        this.users.length=0\n        this.clients.forEach(c => {\n          if (c !== undefined) {\n            this.users.push(c.nickname)\n            console.log(this.users)\n            const map1 = new Map()\n            const qc = this.users.filter(key => !map1.has(key) && map1.set(key, 1))\n            this.users=qc\n\n          }\n        })\n      }\n      },\n    stopV() {\n      this.clients[0].localStream.getTracks().forEach(function(track) {\n        track.stop()\n      })\n    },\n    addV() {\n      navigator.mediaDevices.getDisplayMedia({ constraints }).then(stream => {\n        this.clients[0].localStream = stream\n      }).catch(error => {\n        console.log(error)\n      })\n    },\n    async changeStream(userId) {\n      if (this.clients[0].nowStream === 'screen') {\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n            .then((mediaStream) => {\n              this.stopV()\n              console.log('切换为摄像头')\n              this.clients[0].localStream = mediaStream\n              console.log('本地摄像头设置成功')\n            }).catch((e) => {\n          console.log('本地摄像头设置失败 ' + e.message)\n        })\n        this.clients[0].nowStream = 'camera'\n      } else {\n        this.stopV()\n        var mediaStream = await navigator.mediaDevices.getDisplayMedia(constraints)\n        var audioStream = await navigator.mediaDevices.getUserMedia({ audio: true, video: false })\n        console.log('切换为屏幕')\n        this.clients[0].localStream = mediaStream\n        this.clients[0].localStream.addTrack(audioStream.getAudioTracks()[0])\n        console.log('本地播放器设置成功')\n        this.clients[0].nowStream = 'screen'\n      }\n    },\n    ban(userId) {\n      console.log('ban:' + userId)\n      if (userId === '') { // 全体禁言\n        if (this.isBan) { // 恢复\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFromDate.roomId, 'false', '')\n          this.wsSend(msg)\n        } else {\n          // 全体禁言\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFromDate.roomId, 'true', '')\n          this.wsSend(msg)\n        }\n      } else {\n        if (this.clients[userId].chat) { // 全员发送chat关闭\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFromDate.roomId, 'true', userId)\n          this.wsSend(msg)\n        } else { // 全员发送chat开启\n          const msg = new MessageModel(TYPE_COMMAND_BAN, this.roomFromDate.roomId, 'false', userId)\n          this.wsSend(msg)\n        }\n      }\n    },\n    changeMicro(userId) {\n      console.log('changeMicro:' + userId)\n      if (userId === '') {\n        if (this.isMuted) {\n          const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'false', '')\n          this.wsSend(msg)\n        } else {\n          const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'true', '')\n          this.wsSend(msg)\n        }\n      } else {\n        if (userId == this.clients[0].userId) { // 自己开关麦克风，通知所有人\n          if (this.clients[0].muted) {\n            // 打开麦克风\n            console.log()\n            const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'false', this.clients[0].userId)\n            this.wsSend(msg)\n          } else {\n            // 关闭麦克风\n            const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'true', this.clients[0].userId)\n            this.wsSend(msg)\n          }\n        } else { // 别人\n          if (this.clients[0].isRoomAdmin) { // 自己是管理员，就要彻底开关他的麦克风\n            if (this.clients[Number(userId)].muted) {\n              // 通知所有人打开此人麦克风\n              const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'false', userId)\n              this.wsSend(msg)\n            } else {\n              // 通知所有人关闭此人麦克风\n              const msg = new MessageModel(TYPE_COMMAND_MUTED, this.roomFromDate.roomId, 'true', userId)\n              this.wsSend(msg)\n            }\n          } else {\n            if (this.clients[Number(userId)].muted) {\n              this.clients[Number(userId)].muted = false\n            } else {\n              this.clients[Number(userId)].muted = true\n            }\n          }\n        }\n      }\n    },\n    fullScreen(userId) {\n      console.log('fullScreen:' + userId)\n      if (userId === this.clients[0].userId) {\n        this.$refs.video_full.srcObject = this.clients[0].localStream\n        this.fullScreenId = '0'\n      } else {\n        this.$refs.video_full.srcObject = this.clients[userId].localStream\n        this.fullScreenId = userId\n      }\n    },\n    kick(userId) {\n      console.log('kick:' + userId)\n      const msg = new MessageModel(TYPE_COMMAND_KICK, this.roomFromDate.roomId, '', userId)\n      this.wsSend(msg)\n      console.log(\"踢出\")\n      //踢出去\n      this.ch=2\n      this.init(this.ch)\n    },\n    changeView(userId) {\n      console.log('changeView:' + userId)\n      // console.log(this.clients[0].userId)\n      // console.log(typeof (userId))\n      const uid = userId.toString();\n      // console.log(typeof (this.clients[0].userId))\n      if (userId === '') {\n        if (this.isView) {\n          const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'false', '')\n          this.wsSend(msg)\n        } else {\n          const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'true', '')\n          this.wsSend(msg)\n        }\n      } else {\n        if (uid === this.clients[0].userId) { // 自己开关视频，通知所有人\n          if (this.clients[0].view) {\n            // 打开视频\n            const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'false', this.clients[0].userId)\n            this.wsSend(msg)\n          } else {\n            // 关闭视频\n            const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'true', this.clients[0].userId)\n\n            this.wsSend(msg)\n          }\n        } else { // 别人\n          if (this.clients[0].isRoomAdmin) { // 自己是管理员，就要彻底开关他的视频\n            // console.log(\"0.0\")\n            if (this.clients[Number(userId)].view) {\n              // 通知所有人打开此人视频\n              const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'false', userId)\n              this.wsSend(msg)\n            } else {\n              // 通知所有人关闭此人视频\n              const msg = new MessageModel(TYPE_COMMAND_VIEW, this.roomFromDate.roomId, 'true', userId)\n              this.wsSend(msg)\n            }\n          } else {\n\n            if (this.clients[Number(userId)].view) {\n              this.clients[Number(userId)].view = false\n              if (this.fullScreenId !== '0') {\n                this.$refs.video_full.srcObject = null\n              }\n            } else {\n              this.clients[Number(userId)].view = true\n\n            }\n          }\n        }\n      }\n    },\n    notice(msg) {\n      console.log('notice:' + msg)\n    },\n    sendChat(msg) {\n      console.log('sendChat:' + msg)\n      if (!this.clients[0].chat) {\n        this.$message.error('已被禁言...')\n        return\n      }\n      msg = new MessageModel(TYPE_COMMAND_CHAT, this.roomFromDate.roomId, this.roomFromDate.nickname + ': ' + msg + '\\n')\n      this.wsSend(msg)\n    },\n    receiveMsgHandle(msg) {\n      // clients[0]默认就有\n      const c1 = {\n        userId: '11'\n      }\n      this.$set(this.clients, 1, c1)\n      const c3 = {\n        userId: '33'\n      }\n      this.$set(this.clients, 3, c3)\n      console.log(this.clients)\n    },\n    createOrEnterRoom(method) { // 进入房间\n      this.$refs.romeForm.validate((valid) => {\n        if (valid) {\n          var msg\n          if (method === 'create') {\n            msg = new MessageModel(TYPE_COMMAND_ROOM_CREATE, this.roomFromDate.roomId, this.roomFromDate.nickname, this.user.id, this.roomFromDate.roomPw )\n            console.log('创建房间:' + JSON.stringify(msg))\n            this.wsSend(msg)\n          } else {\n            console.log('加入房间:' + this.roomFromDate.roomId)\n            msg = new MessageModel(TYPE_COMMAND_ROOM_ENTER, this.roomFromDate.roomId, this.roomFromDate.nickname, this.user.id, this.roomFromDate.roomPw)\n            this.wsSend(msg)\n          }\n        } else {\n          console.log('表单验证错误')\n          return false\n        }\n      })\n    },\n    successHandle(message) {\n      // store.dispatch('user/setNickname', this.roomFromDate.nickname)\n      this.startV().then(() => {\n        this.isInRoom = true\n        this.dialogFormVisible = false\n        this.clients[0].userId = message.userId\n        this.clients[0].roomId = message.roomId\n        this.clients[0].nickname = this.roomFromDate.nickname\n        if (message.message === 'create') {\n          console.log('创建房间成功')\n          this.clients[0].isRoomAdmin = true\n        } else {\n          console.log('进入房间成功')\n          this.clients[0].isRoomAdmin = false\n        }\n        // 广播 自己准备好了,其他用户收到后就会创建连接\n        var msg = new MessageModel(TYPE_COMMAND_READY, this.roomFromDate.roomId, this.roomFromDate.nickname, message.userId, '', this.clients[0].isRoomAdmin)\n        console.log('发送准备完毕广播' + msg)\n        this.wsSend(msg)\n        this.$message.success('成功!')\n      })\n    },\n    readyHandle(message) { // 收到上线的用户准备好信号，创建RTCPeerConnectio准备与他连接并发送offer\n      if (this.clients[0].userId === message.userId) { // 是自己准备好了\n        console.log(\"=======NO+======\"+message)\n        this.ch=1\n        this.init(this.ch)\n      } else {\n        console.log(\"我准备好了\")\n        var rtcPeerConnection = new RTCPeerConnection(iceServers)\n        rtcPeerConnection.userId = message.userId\n        for (const track of this.clients[0].localStream.getTracks()) {\n          rtcPeerConnection.addTrack(track, this.clients[0].localStream)\n        }\n        rtcPeerConnection.ontrack = this.onTrack\n        rtcPeerConnection.onicecandidate = this.onIceCandidate\n        const remoteClient = {\n          userId: message.userId,\n          roomId: message.roomId,\n          nickname: message.message,\n          localStream: undefined,\n          peerConnection: rtcPeerConnection,\n          muted: false,\n          view: true,\n          chat: true,\n          isSelf: false,\n          isRoomAdmin: JSON.parse(message.userId),\n          nowStream: 'screen'\n        }\n        this.$set(this.clients, Number(message.userId), remoteClient)\n        console.log('准备完毕,添加了一个连接')\n        this.ch=1\n        this.init(this.ch)\n        console.log(this.clients)\n        console.log('创建offer')\n        rtcPeerConnection.createOffer(offerOptions).then((description) => {\n          console.log('创建offer,设置本地Description')\n          console.log(description)\n          rtcPeerConnection.setLocalDescription(description)\n          var msg = new MessageModel(TYPE_COMMAND_OFFER, this.clients[0].roomId, this.messageDateToString(description), message.userId, this.roomFromDate.nickname, this.clients[0].isRoomAdmin) // 字段不够用,把名字临时放在roomPw字段\n          console.log('发送offer')\n          this.wsSend(msg)\n        }).catch()\n      }\n    },\n    offerHandle(message) {\n      var rtcPeerConnection = new RTCPeerConnection(iceServers)\n      rtcPeerConnection.userId = message.userId\n      console.log('本地流')\n      console.log(this.clients[0].localStream)\n      for (const track of this.clients[0].localStream.getTracks()) {\n        rtcPeerConnection.addTrack(track, this.clients[0].localStream)\n      }\n\n      rtcPeerConnection.ontrack = this.onTrack\n      rtcPeerConnection.onicecandidate = this.onIceCandidate\n      const remoteClient = {\n        userId: message.userId,\n        roomId: message.roomId,\n        nickname: message.roomPw,\n        localStream: undefined,\n        peerConnection: rtcPeerConnection,\n        muted: false,\n        view: true,\n        chat: true,\n        isSelf: false,\n        isRoomAdmin: JSON.parse(message.userId),\n        nowStream: 'screen'\n      }\n      this.$set(this.clients, Number(message.userId), remoteClient)\n      console.log('接受到offer,添加了一个连接')\n      this.ch=1\n      this.init(this.ch)\n      console.log(this.clients)\n      var sdp = JSON.parse(message.message)\n      rtcPeerConnection.setRemoteDescription(new RTCSessionDescription(sdp))\n          .then(\n              console.log('收到offer,设置远程Description 完毕')\n          )\n      rtcPeerConnection.createAnswer(offerOptions)\n          .then((description) => {\n            console.log('创建answer,设置本地Description')\n            rtcPeerConnection.setLocalDescription(description)\n            var msg = new MessageModel(TYPE_COMMAND_ANSWER, this.clients[0].roomId, this.messageDateToString(description), message.userId)\n            // console.log('发送answer:' + JSON.stringify(msg))\n            this.wsSend(msg)\n          })\n          .catch(() => {\n                console.log('创建answer,设置本地AndAnswer 错误')\n              }\n          )\n    },\n    answerHandle(message) {\n      this.clients[Number(message.userId)].peerConnection.setRemoteDescription(JSON.parse(message.message)).then(\n          console.log('收到answer,设置远程描述完毕')\n      )\n      // this.$set(this.clients[Number(message.userId)], 'peerConnection', this.clients[Number(message.userId)].peerConnection)\n    },\n    onIceCandidate(event) {\n      console.log('onIceCandidate')\n      // console.log(event)\n      if (event.candidate === null) {\n        console.log('Candidata为null')\n        return\n      }\n      var msg = new MessageModel(TYPE_COMMAND_CANDIDATE, this.clients[0].roomId, this.messageDateToString(event.candidate), event.target.userId)\n      // console.log('发送Candidate:' + JSON.stringify(msg))\n      this.wsSend(msg)\n    },\n    candidateHandle(message) {\n      console.log('收到Candidata')\n      // console.log(message)\n      console.log(this.clients)\n      var newIceCandidata = new RTCIceCandidate(JSON.parse(message.message))\n      this.clients[Number(message.userId)].peerConnection.addIceCandidate(newIceCandidata)\n          .then(console.log('添加Candidata成功')).catch((error) => {\n        console.log('添加Candidata失败:' + error)\n      })\n    },\n    onTrack(event) {\n      console.log('收到数据流' + event.target.userId)\n      this.clients[Number(event.target.userId)].localStream = event.streams[0]\n    },\n    closeView() {\n      if (this.isInRoom === false) {\n        this.$router.go(-1)\n      }\n    },\n    async initLocalWebsocket() {\n      console.log('初始化weosocket')\n      const response = await getUrl()\n      this.wsUrl = response.data\n      console.log('获取到wsurl:' + this.wsUrl)\n      this.localWebsocket = new WebSocket(this.wsUrl)\n      this.localWebsocket.onmessage = this.wseReceiveMessage\n      this.localWebsocket.onopen = () => {\n        console.log('localWebsocket打开')\n      }\n      this.localWebsocket.onerror = () => {\n        console.log('localWebsocket错误')\n        // 重连？\n      }\n      this.localWebsocket.onclose = (e) => {\n        console.log('localWebsocket关闭' + e)\n      }\n    },\n    wseReceiveMessage(e) { // 数据接收\n      console.log('数据接收:')\n      console.log(e.data)\n      var str = e.data.toString().replace(/!@#/g, '')\n      const message = JSON.parse(str)\n      switch (message.command) {\n        case TYPE_COMMAND_SUCCESS:\n          this.successHandle(message)\n          break\n        case TYPE_COMMAND_ERROR:\n          this.$message.error(message.message)\n          break\n        case TYPE_COMMAND_CHAT:\n          this.receiveMsg = message.message\n          break\n        case TYPE_COMMAND_READY:\n          this.readyHandle(message)\n          break\n        case TYPE_COMMAND_OFFER:\n          message.message\n          this.offerHandle(message)\n          break\n        case TYPE_COMMAND_ANSWER:\n          this.answerHandle(message)\n          break\n        case TYPE_COMMAND_CANDIDATE:\n          this.candidateHandle(message)\n          break\n        case TYPE_COMMAND_VIEW:\n          this.viewHandle(message)\n          break\n        case TYPE_COMMAND_MUTED:\n          this.mutedHandle(message)\n          break\n        case TYPE_COMMAND_BAN:\n          this.banHandle(message)\n          break\n        case TYPE_COMMAND_KICK:\n          this.kickHandle(message)\n          break\n      }\n    },\n    viewHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体开启视频\n          this.isView = true\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.view = true\n            }\n          })\n        } else {\n          // 全体关闭视频\n          if (this.fullScreenId !== '0') {\n            this.$refs.video_full.srcObject = null\n          }\n          this.isView = false\n          this.clients.forEach(c => {\n            if (c !== undefined ) {\n              c.view = false\n            }\n          })\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].view = true\n            this.clients[0].localStream.getVideoTracks()[0].enabled = true\n          } else {\n            this.clients[0].view = false\n            this.clients[0].localStream.getVideoTracks()[0].enabled = false\n            if (this.fullScreenId === '0') {\n              this.$refs.video_full.srcObject = null\n            }\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].view = true\n          } else {\n            this.clients[Number(message.userId)].view = false\n            if (this.fullScreenId === message.userId) {\n              this.$refs.video_full.srcObject = null\n            }\n          }\n        }\n      }\n    },\n    getusers(message){\n      console.log(message)\n    },\n\n    mutedHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体静音\n          this.isMuted = true\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.muted = true\n            }\n          })\n        } else {\n          // 全体取消静音\n          this.isMuted = false\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.muted = false\n            }\n          })\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].muted = true\n            this.clients[0].localStream.getAudioTracks()[0].enabled = false\n          } else {\n            this.clients[0].muted = false\n            this.clients[0].localStream.getAudioTracks()[0].enabled = true\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].muted = true\n          } else {\n            this.clients[Number(message.userId)].muted = false\n          }\n        }\n      }\n    }, banHandle(message) {\n      if (message.userId === '') {\n        if (message.message === 'true') {\n          // 全体禁言\n          this.isBan = true\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.chat = false\n            }\n          })\n        } else {\n          // 全体取消禁言\n          this.isBan = false\n          this.clients.forEach(c => {\n            if (c !== undefined) {\n              c.chat = true\n            }\n          })\n        }\n      } else {\n        if (message.userId === this.clients[0].userId) {\n          if (message.message === 'true') {\n            this.clients[0].chat = false\n          } else {\n            this.clients[0].chat = true\n          }\n        } else {\n          if (message.message === 'true') {\n            this.clients[Number(message.userId)].chat = false\n          } else {\n            this.clients[Number(message.userId)].chat = true\n          }\n        }\n      }\n    }, kickHandle(message) {\n      if (message.userId === this.clients[0].userId) {\n        this.$message.error('您被踢出会议!')\n        this.$router.go(-1)\n        this.ch=2\n        this.init(this.ch)\n      } else {\n        this.clients[Number(message.userId)].peerConnection.close()\n        this.clients.splice(Number(message.userId), 1)\n        this.ch=2\n        this.init(this.ch)\n      }\n    },\n    wsSend(data) { // 数据发送\n      this.localWebsocket.send(JSON.stringify(data))\n    },\n    messageDateToString(data) { // 如果message字段是对象，就把他变成字符串，这样服务器解析不会报错\n      return '!@#' + JSON.stringify(data) + '!@#'\n    }\n\n  }\n\n}\n\nclass MessageModel {\n  constructor(command, roomId, message, userId, roomPw) {\n    this.command = command\n    this.userId = userId\n    this.roomId = roomId\n    this.message = message\n    this.roomPw = roomPw\n  }\n}\n\nconst TYPE_COMMAND_ROOM_ENTER = 'enterRoom'\nconst TYPE_COMMAND_ROOM_CREATE = 'createRoom'\nconst TYPE_COMMAND_READY = 'ready'\nconst TYPE_COMMAND_OFFER = 'offer'\nconst TYPE_COMMAND_ANSWER = 'answer'\nconst TYPE_COMMAND_CANDIDATE = 'candidate'\n\nconst TYPE_COMMAND_ERROR = 'error'\nconst TYPE_COMMAND_SUCCESS = 'success'\nconst TYPE_COMMAND_CHAT = 'chat'\n\nconst TYPE_COMMAND_MUTED = 'MUTED'\nconst TYPE_COMMAND_VIEW = 'VIEW'\nconst TYPE_COMMAND_BAN = 'BAN'\nconst TYPE_COMMAND_KICK = 'KICK'\nconst TYPE_COMMAND_GETUSER = \"users\"\n// const TYPE_COMMAND_SIGN = 'SIGN'\n\nconst iceServers = {\n  'iceServers': [\n    { url: 'stun:stun.ekiga.net' },\n    { url: 'stun:stun.ideasip.com' }\n  ]\n}\nconst offerOptions = {\n  iceRestart: true,\n  offerToReceiveAudio: true,\n  offerToReceiveVideo: true\n}\nconst constraints = {\n  audio: true,\n  video: true\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.meeting-container{\n  height: 99%;\n  border-radius: 15px;\n  box-sizing: border-box;\n  padding:15px ;\n  margin: 0;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  align-content: flex-start;\n}\n.el-header {\n  background-color: #B3C0D1;\n  padding: 0;\n  margin: 0;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  white-space: nowrap;\n}\n\n.el-aside {\n  background-color: #D3DCE6;\n  margin: 0;\n  padding: 8px 10px 20px;\n}\n\n.el-main {\n  background-color: #E9EEF3;\n\n  padding: 0;\n}\n\n.el-container {\n}\n.el-divider--horizontal {\n  display: block;\n  height: 1px;\n  width: 100%;\n  margin: -20px 0;\n  background: #616161;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}