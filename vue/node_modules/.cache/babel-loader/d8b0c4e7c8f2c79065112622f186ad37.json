{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data() {\n    return {\n      name: \"Header\",\n      circleSrc: \"../assets/logo.png\",\n      sizeList: [\"large\"],\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {}\n    };\n  },\n\n  methods: {\n    joinHistoryMsg() {\n      let join = () => {\n        let arr = []; //通过当前页码及页数，模拟数据内容\n\n        let startIndex = (this.ajax.page - 1) * this.ajax.rows;\n        let endIndex = startIndex + this.ajax.rows;\n\n        for (let i = startIndex; i < endIndex; i++) {\n          arr.push({\n            \"id\": i,\n            // 消息的ID\n            \"content\": `这是历史记录的第${i + 1}条消息`,\n            // 消息内容\n            \"type\": Math.random() > 0.5 ? 1 : 0,\n            // 此为消息类别，设 1 为发出去的消息，0 为收到对方的消息,\n            \"pic\": this.user.avatar // 头像\n\n          });\n        }\n        /*\r\n          颠倒数组中元素的顺序。将最新的数据排在本次接口返回数据的最后面。\r\n          后端接口按 消息的时间降序查找出当前页的数据后，再将本页数据按消息时间降序排序返回。\r\n          这是数据的重点，因为页面滚动条和上拉加载历史的问题。\r\n         */\n\n\n        arr.reverse();\n        return arr;\n      }; // 此处用到 ES6 的 Promise 知识，不懂的请自行学习。\n\n\n      return new Promise((done, fail) => {\n        // 无数据请求接口，由 setTimeout 模拟，正式项目替换为 ajax 即可。\n        setTimeout(() => {\n          let data = join();\n          done(data);\n        }, 1500);\n      });\n    },\n\n    refresh() {\n      window.localStorage.clear(); // 状态保持清除后刷新页面\n\n      this.$message.success(\"退出成功\");\n      this.$router.go(0);\n    }\n\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;EAEAA;IACA;MACAC,cADA;MAEAC,+BAFA;MAGAC,mBAHA;MAIAC;IAJA;EAMA,CATA;;EAUAC;IACAC;MACA;QACA,aADA,CAGA;;QACA;QACA;;QACA;UACAC;YACA,OADA;YACA;YACA,gCAFA;YAEA;YACA,mCAHA;YAGA;YACA,uBAJA,CAIA;;UAJA;QAMA;QAIA;AACA;AACA;AACA;AACA;;;QACAA;QAEA;MACA,CAzBA,CADA,CA4BA;;;MACA;QACA;QACAC;UACA;UACAC;QACA,CAHA,EAGA,IAHA;MAIA,CANA;IAOA,CArCA;;IA0CAC;MACAC,4BADA,CAEA;;MACA;MACA;IAMA;;EApDA;AAVA","names":["data","name","circleSrc","sizeList","user","methods","joinHistoryMsg","arr","setTimeout","done","refresh","window"],"sourceRoot":"src/components","sources":["Header.vue"],"sourcesContent":["<template>\r\n\r\n<div style=\"height: 65px; line-height: 63px;border-bottom: 1px solid rgb(215, 215, 215); display: flex;\">\r\n\r\n  <div class=\"demo-basic--circle\" >\r\n    <div class=\"block\" ><el-avatar :size=\"60\"  style=\"position: absolute;top: 3px;left: 38px;\"><img class=\"an img\"  src=\"../assets/logo.jpg\" ></el-avatar></div>\r\n  </div>\r\n\r\n  <div style=\"width: 300px; padding-left: 30px;font-weight: 300;font-family: Hiragino Sans GB; color: #ffcb2e;  position: absolute; left: 100px; font-size: x-large;}\">小酷人脸识别后台</div>\r\n  <div style=\"flex: 1\"></div>\r\n  <div style=\"width: 100px;\">\r\n\r\n\r\n\r\n    <el-dropdown  style=\" position: absolute;top: -27px;right: 33px;\" popper-class=\"popper-select\" placement=\"bottom\" visible-arrow=\"false\"  >\r\n      <div class=\"el-dropdown-link\" >\r\n        <img :src=\"user.avatar\" alt=\"\"\r\n             style=\"  width: 48px; border-radius: 50%;   position: relative;  top: 35px; \">\r\n<!--        <span STYLE=\"color: #f2f6fc; padding-left: 7px;\">-->\r\n<!--          {{user.name}}</span>-->\r\n      </div>\r\n      <el-dropdown-menu slot=\"dropdown\" class=\"ddd\"  >\r\n        <template slot-scope=\"scope\" >\r\n          <div @click=\"handleEdit(scope.row)\"> <el-dropdown-item  >  {{user.name}} </el-dropdown-item></div>\r\n<!--          <div @click=\"$router.push('/AddMeeting')\"> <el-dropdown-item divided>加入会议</el-dropdown-item></div>-->\r\n          <router-link :to=\"{path:'/'}\" @click.native=\"refresh\" style=\"text-decoration: none;\"><el-dropdown-item divided >退出登录</el-dropdown-item>\r\n          </router-link>\r\n\r\n        </template>\r\n      </el-dropdown-menu>\r\n    </el-dropdown>\r\n\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n\r\n<script>\r\nexport default {\r\n\r\n  data () {\r\n    return {\r\n      name: \"Header\",\r\n      circleSrc:\"../assets/logo.png\",\r\n      sizeList: [\"large\"],\r\n      user: localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {},\r\n    }\r\n  },\r\n methods: {\r\n   joinHistoryMsg(){\r\n     let join = ()=>{\r\n       let arr = [];\r\n\r\n       //通过当前页码及页数，模拟数据内容\r\n       let startIndex = (this.ajax.page-1) * this.ajax.rows;\r\n       let endIndex = startIndex + this.ajax.rows;\r\n       for(let i = startIndex; i < endIndex; i++){\r\n         arr.push({\r\n           \"id\":i,\t// 消息的ID\r\n           \"content\":`这是历史记录的第${i+1}条消息`,\t// 消息内容\r\n           \"type\":Math.random() > 0.5 ? 1 : 0\t,// 此为消息类别，设 1 为发出去的消息，0 为收到对方的消息,\r\n           \"pic\":this.user.avatar\t// 头像\r\n         })\r\n       }\r\n\r\n\r\n\r\n       /*\r\n         颠倒数组中元素的顺序。将最新的数据排在本次接口返回数据的最后面。\r\n         后端接口按 消息的时间降序查找出当前页的数据后，再将本页数据按消息时间降序排序返回。\r\n         这是数据的重点，因为页面滚动条和上拉加载历史的问题。\r\n        */\r\n       arr.reverse();\r\n\r\n       return arr;\r\n     }\r\n\r\n     // 此处用到 ES6 的 Promise 知识，不懂的请自行学习。\r\n     return new Promise((done,fail)=>{\r\n       // 无数据请求接口，由 setTimeout 模拟，正式项目替换为 ajax 即可。\r\n       setTimeout(()=>{\r\n         let data = join();\r\n         done(data);\r\n       },1500);\r\n     })\r\n   },\r\n\r\n\r\n\r\n\r\n    refresh(){\r\n      window.localStorage.clear()\r\n      // 状态保持清除后刷新页面\r\n      this.$message.success(\"退出成功\")\r\n     this.$router.go(0)\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n  }\r\n\r\n}\r\n\r\n</script>\r\n\r\n<style scoped>\r\n@-webkit-keyframes rotation{\r\n  from {-webkit-transform: rotate(0deg);}\r\n  to {-webkit-transform: rotate(360deg);}\r\n}\r\n.an:hover{\r\n  -webkit-transform: rotate(360deg);\r\n  animation: rotation 3s linear infinite;\r\n  -moz-animation: rotation 3s linear infinite;\r\n  -webkit-animation: rotation 3s linear infinite;\r\n  -o-animation: rotation 3s linear infinite;\r\n}\r\n.img{border-radius: 200px;}\r\n::v-deep.ddd  {\r\n  zoom: 1.03;\r\n  font-size: large;\r\n  width: 100px;\r\n}\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}